
LCD_BUTTON_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026f0  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800c760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          00000818  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000898  20000898  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   000242f4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004d27  00000000  00000000  000443a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e28  00000000  00000000  000490d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001bc0  00000000  00000000  0004aef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d9a3  00000000  00000000  0004cab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009189  00000000  00000000  0005a45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000635e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d50  00000000  00000000  00063660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a048 	.word	0x0800a048

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	0800a048 	.word	0x0800a048

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000500:	f000 fe4a 	bl	8001198 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000504:	20ca      	movs	r0, #202	; 0xca
 8000506:	f000 f95d 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800050a:	20c3      	movs	r0, #195	; 0xc3
 800050c:	f000 f967 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000510:	2008      	movs	r0, #8
 8000512:	f000 f964 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000516:	2050      	movs	r0, #80	; 0x50
 8000518:	f000 f961 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800051c:	20cf      	movs	r0, #207	; 0xcf
 800051e:	f000 f951 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f95b 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000528:	20c1      	movs	r0, #193	; 0xc1
 800052a:	f000 f958 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800052e:	2030      	movs	r0, #48	; 0x30
 8000530:	f000 f955 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000534:	20ed      	movs	r0, #237	; 0xed
 8000536:	f000 f945 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f000 f94f 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f94c 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000546:	2012      	movs	r0, #18
 8000548:	f000 f949 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800054c:	2081      	movs	r0, #129	; 0x81
 800054e:	f000 f946 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000552:	20e8      	movs	r0, #232	; 0xe8
 8000554:	f000 f936 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000558:	2085      	movs	r0, #133	; 0x85
 800055a:	f000 f940 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f93d 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000564:	2078      	movs	r0, #120	; 0x78
 8000566:	f000 f93a 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800056a:	20cb      	movs	r0, #203	; 0xcb
 800056c:	f000 f92a 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000570:	2039      	movs	r0, #57	; 0x39
 8000572:	f000 f934 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000576:	202c      	movs	r0, #44	; 0x2c
 8000578:	f000 f931 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f92e 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000582:	2034      	movs	r0, #52	; 0x34
 8000584:	f000 f92b 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000588:	2002      	movs	r0, #2
 800058a:	f000 f928 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800058e:	20f7      	movs	r0, #247	; 0xf7
 8000590:	f000 f918 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000594:	2020      	movs	r0, #32
 8000596:	f000 f922 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800059a:	20ea      	movs	r0, #234	; 0xea
 800059c:	f000 f912 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f91c 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f919 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005ac:	20b1      	movs	r0, #177	; 0xb1
 80005ae:	f000 f909 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f913 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005b8:	201b      	movs	r0, #27
 80005ba:	f000 f910 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005be:	20b6      	movs	r0, #182	; 0xb6
 80005c0:	f000 f900 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005c4:	200a      	movs	r0, #10
 80005c6:	f000 f90a 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005ca:	20a2      	movs	r0, #162	; 0xa2
 80005cc:	f000 f907 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005d0:	20c0      	movs	r0, #192	; 0xc0
 80005d2:	f000 f8f7 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005d6:	2010      	movs	r0, #16
 80005d8:	f000 f901 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005dc:	20c1      	movs	r0, #193	; 0xc1
 80005de:	f000 f8f1 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005e2:	2010      	movs	r0, #16
 80005e4:	f000 f8fb 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80005e8:	20c5      	movs	r0, #197	; 0xc5
 80005ea:	f000 f8eb 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80005ee:	2045      	movs	r0, #69	; 0x45
 80005f0:	f000 f8f5 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80005f4:	2015      	movs	r0, #21
 80005f6:	f000 f8f2 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80005fa:	20c7      	movs	r0, #199	; 0xc7
 80005fc:	f000 f8e2 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000600:	2090      	movs	r0, #144	; 0x90
 8000602:	f000 f8ec 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000606:	2036      	movs	r0, #54	; 0x36
 8000608:	f000 f8dc 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800060c:	20c8      	movs	r0, #200	; 0xc8
 800060e:	f000 f8e6 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000612:	20f2      	movs	r0, #242	; 0xf2
 8000614:	f000 f8d6 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f8e0 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800061e:	20b0      	movs	r0, #176	; 0xb0
 8000620:	f000 f8d0 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000624:	20c2      	movs	r0, #194	; 0xc2
 8000626:	f000 f8da 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800062a:	20b6      	movs	r0, #182	; 0xb6
 800062c:	f000 f8ca 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 f8d4 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000636:	20a7      	movs	r0, #167	; 0xa7
 8000638:	f000 f8d1 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800063c:	2027      	movs	r0, #39	; 0x27
 800063e:	f000 f8ce 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000642:	2004      	movs	r0, #4
 8000644:	f000 f8cb 	bl	80007de <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000648:	202a      	movs	r0, #42	; 0x2a
 800064a:	f000 f8bb 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f8c5 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f8c2 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f8bf 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000660:	20ef      	movs	r0, #239	; 0xef
 8000662:	f000 f8bc 	bl	80007de <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000666:	202b      	movs	r0, #43	; 0x2b
 8000668:	f000 f8ac 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f8b6 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f8b3 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f8b0 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800067e:	203f      	movs	r0, #63	; 0x3f
 8000680:	f000 f8ad 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000684:	20f6      	movs	r0, #246	; 0xf6
 8000686:	f000 f89d 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f8a7 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8a4 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000696:	2006      	movs	r0, #6
 8000698:	f000 f8a1 	bl	80007de <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800069c:	202c      	movs	r0, #44	; 0x2c
 800069e:	f000 f891 	bl	80007c4 <ili9341_WriteReg>
  LCD_Delay(200);
 80006a2:	20c8      	movs	r0, #200	; 0xc8
 80006a4:	f000 fe66 	bl	8001374 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006a8:	2026      	movs	r0, #38	; 0x26
 80006aa:	f000 f88b 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 f895 	bl	80007de <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006b4:	20e0      	movs	r0, #224	; 0xe0
 80006b6:	f000 f885 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f88f 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006c0:	2029      	movs	r0, #41	; 0x29
 80006c2:	f000 f88c 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006c6:	2024      	movs	r0, #36	; 0x24
 80006c8:	f000 f889 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006cc:	200c      	movs	r0, #12
 80006ce:	f000 f886 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006d2:	200e      	movs	r0, #14
 80006d4:	f000 f883 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006d8:	2009      	movs	r0, #9
 80006da:	f000 f880 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006de:	204e      	movs	r0, #78	; 0x4e
 80006e0:	f000 f87d 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80006e4:	2078      	movs	r0, #120	; 0x78
 80006e6:	f000 f87a 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80006ea:	203c      	movs	r0, #60	; 0x3c
 80006ec:	f000 f877 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006f0:	2009      	movs	r0, #9
 80006f2:	f000 f874 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80006f6:	2013      	movs	r0, #19
 80006f8:	f000 f871 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80006fc:	2005      	movs	r0, #5
 80006fe:	f000 f86e 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000702:	2017      	movs	r0, #23
 8000704:	f000 f86b 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000708:	2011      	movs	r0, #17
 800070a:	f000 f868 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f865 	bl	80007de <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000714:	20e1      	movs	r0, #225	; 0xe1
 8000716:	f000 f855 	bl	80007c4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f85f 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000720:	2016      	movs	r0, #22
 8000722:	f000 f85c 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000726:	201b      	movs	r0, #27
 8000728:	f000 f859 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800072c:	2004      	movs	r0, #4
 800072e:	f000 f856 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000732:	2011      	movs	r0, #17
 8000734:	f000 f853 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000738:	2007      	movs	r0, #7
 800073a:	f000 f850 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800073e:	2031      	movs	r0, #49	; 0x31
 8000740:	f000 f84d 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000744:	2033      	movs	r0, #51	; 0x33
 8000746:	f000 f84a 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800074a:	2042      	movs	r0, #66	; 0x42
 800074c:	f000 f847 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000750:	2005      	movs	r0, #5
 8000752:	f000 f844 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000756:	200c      	movs	r0, #12
 8000758:	f000 f841 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800075c:	200a      	movs	r0, #10
 800075e:	f000 f83e 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000762:	2028      	movs	r0, #40	; 0x28
 8000764:	f000 f83b 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000768:	202f      	movs	r0, #47	; 0x2f
 800076a:	f000 f838 	bl	80007de <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800076e:	200f      	movs	r0, #15
 8000770:	f000 f835 	bl	80007de <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000774:	2011      	movs	r0, #17
 8000776:	f000 f825 	bl	80007c4 <ili9341_WriteReg>
  LCD_Delay(200);
 800077a:	20c8      	movs	r0, #200	; 0xc8
 800077c:	f000 fdfa 	bl	8001374 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000780:	2029      	movs	r0, #41	; 0x29
 8000782:	f000 f81f 	bl	80007c4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000786:	202c      	movs	r0, #44	; 0x2c
 8000788:	f000 f81c 	bl	80007c4 <ili9341_WriteReg>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000794:	f000 fd00 	bl	8001198 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000798:	2103      	movs	r1, #3
 800079a:	20d3      	movs	r0, #211	; 0xd3
 800079c:	f000 f82c 	bl	80007f8 <ili9341_ReadData>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007ac:	2029      	movs	r0, #41	; 0x29
 80007ae:	f000 f809 	bl	80007c4 <ili9341_WriteReg>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f000 f802 	bl	80007c4 <ili9341_WriteReg>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fd7b 	bl	80012cc <LCD_IO_WriteReg>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fd4c 	bl	8001288 <LCD_IO_WriteData>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	80fb      	strh	r3, [r7, #6]
 8000804:	4613      	mov	r3, r2
 8000806:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000808:	797a      	ldrb	r2, [r7, #5]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fd7e 	bl	8001310 <LCD_IO_ReadData>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000822:	23f0      	movs	r3, #240	; 0xf0
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000832:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fa59 	bl	8000d04 <stmpe811_GetInstance>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	d112      	bne.n	8000882 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 fa51 	bl	8000d04 <stmpe811_GetInstance>
 8000862:	4603      	mov	r3, r0
 8000864:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d80a      	bhi.n	8000882 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	b2d1      	uxtb	r1, r2
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <stmpe811_Init+0x4c>)
 8000874:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8000876:	f000 fd88 	bl	800138a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f807 	bl	8000890 <stmpe811_Reset>
    }
  }
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000009c 	.word	0x2000009c

08000890 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2202      	movs	r2, #2
 80008a0:	2103      	movs	r1, #3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fd7d 	bl	80013a2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 fdb7 	bl	800141c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2200      	movs	r2, #0
 80008b4:	2103      	movs	r1, #3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fd73 	bl	80013a2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 fdad 	bl	800141c <IOE_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80008d4:	f000 fd59 	bl	800138a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fd72 	bl	80013c8 <IOE_Read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fd69 	bl	80013c8 <IOE_Read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80008fa:	4323      	orrs	r3, r4
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	b29b      	uxth	r3, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}

08000908 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2109      	movs	r1, #9
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fd53 	bl	80013c8 <IOE_Read>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	2109      	movs	r1, #9
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fd33 	bl	80013a2 <IOE_Write>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2109      	movs	r1, #9
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fd35 	bl	80013c8 <IOE_Read>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	2109      	movs	r1, #9
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fd15 	bl	80013a2 <IOE_Write>
    
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	80fb      	strh	r3, [r7, #6]
 800098c:	4613      	mov	r3, r2
 800098e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	210a      	movs	r1, #10
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fd14 	bl	80013c8 <IOE_Read>
 80009a0:	4603      	mov	r3, r0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	210a      	movs	r1, #10
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fcf4 	bl	80013a2 <IOE_Write>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	460a      	mov	r2, r1
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4613      	mov	r3, r2
 80009d0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	210a      	movs	r1, #10
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fcf3 	bl	80013c8 <IOE_Read>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80009e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4013      	ands	r3, r2
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	210a      	movs	r1, #10
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fcce 	bl	80013a2 <IOE_Write>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	460a      	mov	r2, r1
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	210b      	movs	r1, #11
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fccf 	bl	80013c8 <IOE_Read>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	797b      	ldrb	r3, [r7, #5]
 8000a30:	4013      	ands	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	797a      	ldrb	r2, [r7, #5]
 8000a52:	210b      	movs	r1, #11
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fca4 	bl	80013a2 <IOE_Write>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	6039      	str	r1, [r7, #0]
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2117      	movs	r1, #23
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fca5 	bl	80013c8 <IOE_Read>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	7bfa      	ldrb	r2, [r7, #15]
 8000a9a:	2117      	movs	r1, #23
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fc80 	bl	80013a2 <IOE_Write>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2104      	movs	r1, #4
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fc84 	bl	80013c8 <IOE_Read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f023 0304 	bic.w	r3, r3, #4
 8000aca:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	7bfa      	ldrb	r2, [r7, #15]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fc64 	bl	80013a2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	21f0      	movs	r1, #240	; 0xf0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ffbf 	bl	8000a62 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	2104      	movs	r1, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fc54 	bl	80013a2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2249      	movs	r2, #73	; 0x49
 8000b00:	2120      	movs	r1, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fc4d 	bl	80013a2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f000 fc87 	bl	800141c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	2121      	movs	r1, #33	; 0x21
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fc43 	bl	80013a2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	229a      	movs	r2, #154	; 0x9a
 8000b22:	2141      	movs	r1, #65	; 0x41
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fc3c 	bl	80013a2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2201      	movs	r2, #1
 8000b30:	214a      	movs	r1, #74	; 0x4a
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fc35 	bl	80013a2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	214b      	movs	r1, #75	; 0x4b
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fc2e 	bl	80013a2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	214b      	movs	r1, #75	; 0x4b
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fc27 	bl	80013a2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2156      	movs	r1, #86	; 0x56
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fc20 	bl	80013a2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2201      	movs	r2, #1
 8000b68:	2158      	movs	r1, #88	; 0x58
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fc19 	bl	80013a2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc12 	bl	80013a2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	210b      	movs	r1, #11
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc0b 	bl	80013a2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fc45 	bl	800141c <IOE_Delay>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fc0a 	bl	80013c8 <IOE_Read>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	2b80      	cmp	r3, #128	; 0x80
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2301      	moveq	r3, #1
 8000bc0:	2300      	movne	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	214c      	movs	r1, #76	; 0x4c
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fbf8 	bl	80013c8 <IOE_Read>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e00d      	b.n	8000c00 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2201      	movs	r2, #1
 8000bea:	214b      	movs	r1, #75	; 0x4b
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fbd8 	bl	80013a2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	214b      	movs	r1, #75	; 0x4b
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fbd1 	bl	80013a2 <IOE_Write>
  }
  
  return ret;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	b2d8      	uxtb	r0, r3
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	2304      	movs	r3, #4
 8000c22:	21d7      	movs	r1, #215	; 0xd7
 8000c24:	f000 fbe3 	bl	80013ee <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000c28:	7c3b      	ldrb	r3, [r7, #16]
 8000c2a:	061a      	lsls	r2, r3, #24
 8000c2c:	7c7b      	ldrb	r3, [r7, #17]
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	431a      	orrs	r2, r3
 8000c32:	7cbb      	ldrb	r3, [r7, #18]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4313      	orrs	r3, r2
 8000c38:	7cfa      	ldrb	r2, [r7, #19]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	0d1b      	lsrs	r3, r3, #20
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	214b      	movs	r1, #75	; 0x4b
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fb9e 	bl	80013a2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	214b      	movs	r1, #75	; 0x4b
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fb97 	bl	80013a2 <IOE_Write>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8000c86:	f000 fb86 	bl	8001396 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	211f      	movs	r1, #31
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fe76 	bl	8000980 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe36 	bl	8000908 <stmpe811_EnableGlobalIT>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe47 	bl	8000944 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	211f      	movs	r1, #31
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe81 	bl	80009c2 <stmpe811_DisableITSource>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	211f      	movs	r1, #31
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe99 	bl	8000a0e <stmpe811_ReadGITStatus>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	211f      	movs	r1, #31
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fea1 	bl	8000a3c <stmpe811_ClearGlobalIT>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e00b      	b.n	8000d30 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <stmpe811_GetInstance+0x40>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d101      	bne.n	8000d2a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e006      	b.n	8000d38 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d9f0      	bls.n	8000d18 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000d36:	23ff      	movs	r3, #255	; 0xff
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	2000009c 	.word	0x2000009c

08000d48 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <I2Cx_MspInit+0xdc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d15f      	bne.n	8000e1a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8000d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000da4:	2304      	movs	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	481f      	ldr	r0, [pc, #124]	; (8000e2c <I2Cx_MspInit+0xe4>)
 8000db0:	f002 fa26 	bl	8003200 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481b      	ldr	r0, [pc, #108]	; (8000e30 <I2Cx_MspInit+0xe8>)
 8000dc2:	f002 fa1d 	bl	8003200 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dec:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <I2Cx_MspInit+0xe0>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000df8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	2048      	movs	r0, #72	; 0x48
 8000e00:	f001 fc5e 	bl	80026c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000e04:	2048      	movs	r0, #72	; 0x48
 8000e06:	f001 fc77 	bl	80026f8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2049      	movs	r0, #73	; 0x49
 8000e10:	f001 fc56 	bl	80026c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8000e14:	2049      	movs	r0, #73	; 0x49
 8000e16:	f001 fc6f 	bl	80026f8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005c00 	.word	0x40005c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <I2Cx_Init+0x58>)
 8000e3a:	f004 facd 	bl	80053d8 <HAL_I2C_GetState>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d121      	bne.n	8000e88 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <I2Cx_Init+0x58>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <I2Cx_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <I2Cx_Init+0x58>)
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <I2Cx_Init+0x60>)
 8000e4e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <I2Cx_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <I2Cx_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <I2Cx_Init+0x58>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <I2Cx_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <I2Cx_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <I2Cx_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <I2Cx_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <I2Cx_Init+0x58>)
 8000e7e:	f7ff ff63 	bl	8000d48 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000e82:	4802      	ldr	r0, [pc, #8]	; (8000e8c <I2Cx_Init+0x58>)
 8000e84:	f003 fe30 	bl	8004ae8 <HAL_I2C_Init>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000025c 	.word	0x2000025c
 8000e90:	40005c00 	.word	0x40005c00
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <I2Cx_ITConfig+0x58>)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <I2Cx_ITConfig+0x58>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <I2Cx_ITConfig+0x58>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8000eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <I2Cx_ITConfig+0x5c>)
 8000eca:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <I2Cx_ITConfig+0x60>)
 8000ed2:	f002 f995 	bl	8003200 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210f      	movs	r1, #15
 8000eda:	2028      	movs	r0, #40	; 0x28
 8000edc:	f001 fbf0 	bl	80026c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f001 fc09 	bl	80026f8 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	10210000 	.word	0x10210000
 8000ef8:	40020000 	.word	0x40020000

08000efc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <I2Cx_WriteData+0x4c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1d7b      	adds	r3, r7, #5
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <I2Cx_WriteData+0x50>)
 8000f2c:	f003 ff34 	bl	8004d98 <HAL_I2C_Mem_Write>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8000f3a:	f000 f863 	bl	8001004 <I2Cx_Error>
  }        
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000060 	.word	0x20000060
 8000f4c:	2000025c 	.word	0x2000025c

08000f50 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <I2Cx_ReadData+0x50>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 030e 	add.w	r3, r7, #14
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <I2Cx_ReadData+0x54>)
 8000f84:	f004 f802 	bl	8004f8c <HAL_I2C_Mem_Read>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8000f92:	f000 f837 	bl	8001004 <I2Cx_Error>
  
  }
  return value;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000060 	.word	0x20000060
 8000fa4:	2000025c 	.word	0x2000025c

08000fa8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	603a      	str	r2, [r7, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <I2Cx_ReadBuffer+0x54>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <I2Cx_ReadBuffer+0x58>)
 8000fdc:	f003 ffd6 	bl	8004f8c <HAL_I2C_Mem_Read>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e002      	b.n	8000ff4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8000fee:	f000 f809 	bl	8001004 <I2Cx_Error>

    return 1;
 8000ff2:	2301      	movs	r3, #1
  }
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000060 	.word	0x20000060
 8001000:	2000025c 	.word	0x2000025c

08001004 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <I2Cx_Error+0x14>)
 800100a:	f003 fe95 	bl	8004d38 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800100e:	f7ff ff11 	bl	8000e34 <I2Cx_Init>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000025c 	.word	0x2000025c

0800101c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <SPIx_Init+0x6c>)
 8001022:	f006 fc07 	bl	8007834 <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d12b      	bne.n	8001084 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <SPIx_Init+0x6c>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <SPIx_Init+0x70>)
 8001030:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <SPIx_Init+0x6c>)
 8001034:	2218      	movs	r2, #24
 8001036:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <SPIx_Init+0x6c>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <SPIx_Init+0x6c>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <SPIx_Init+0x6c>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <SPIx_Init+0x6c>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <SPIx_Init+0x6c>)
 8001052:	2207      	movs	r2, #7
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <SPIx_Init+0x6c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <SPIx_Init+0x6c>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <SPIx_Init+0x6c>)
 8001064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001068:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <SPIx_Init+0x6c>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SPIx_Init+0x6c>)
 8001072:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001076:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <SPIx_Init+0x6c>)
 800107a:	f000 f853 	bl	8001124 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800107e:	4802      	ldr	r0, [pc, #8]	; (8001088 <SPIx_Init+0x6c>)
 8001080:	f005 ff75 	bl	8006f6e <HAL_SPI_Init>
  } 
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000a0 	.word	0x200000a0
 800108c:	40015000 	.word	0x40015000

08001090 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <SPIx_Read+0x38>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f107 0108 	add.w	r1, r7, #8
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <SPIx_Read+0x3c>)
 80010ac:	f006 f91c 	bl	80072e8 <HAL_SPI_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80010ba:	f000 f827 	bl	800110c <SPIx_Error>
  }
  
  return readvalue;
 80010be:	68bb      	ldr	r3, [r7, #8]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000064 	.word	0x20000064
 80010cc:	200000a0 	.word	0x200000a0

080010d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <SPIx_Write+0x34>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	1db9      	adds	r1, r7, #6
 80010e4:	2201      	movs	r2, #1
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <SPIx_Write+0x38>)
 80010e8:	f005 ffcc 	bl	8007084 <HAL_SPI_Transmit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80010f6:	f000 f809 	bl	800110c <SPIx_Error>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000064 	.word	0x20000064
 8001108:	200000a0 	.word	0x200000a0

0800110c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <SPIx_Error+0x14>)
 8001112:	f005 ff8f 	bl	8007034 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001116:	f7ff ff81 	bl	800101c <SPIx_Init>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000a0 	.word	0x200000a0

08001124 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <SPIx_MspInit+0x6c>)
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <SPIx_MspInit+0x6c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <SPIx_MspInit+0x6c>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <SPIx_MspInit+0x6c>)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <SPIx_MspInit+0x6c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <SPIx_MspInit+0x6c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001164:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001176:	2305      	movs	r3, #5
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <SPIx_MspInit+0x70>)
 8001182:	f002 f83d 	bl	8003200 <HAL_GPIO_Init>
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40021400 	.word	0x40021400

08001198 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <LCD_IO_Init+0xe0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d164      	bne.n	8001270 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <LCD_IO_Init+0xe0>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <LCD_IO_Init+0xe4>)
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <LCD_IO_Init+0xe4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <LCD_IO_Init+0xe4>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <LCD_IO_Init+0xe8>)
 80011e2:	f002 f80d 	bl	8003200 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <LCD_IO_Init+0xe4>)
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <LCD_IO_Init+0xe4>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <LCD_IO_Init+0xe4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4819      	ldr	r0, [pc, #100]	; (8001280 <LCD_IO_Init+0xe8>)
 800121c:	f001 fff0 	bl	8003200 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4a15      	ldr	r2, [pc, #84]	; (800127c <LCD_IO_Init+0xe4>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <LCD_IO_Init+0xe4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <LCD_IO_Init+0xe4>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800123c:	2304      	movs	r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <LCD_IO_Init+0xec>)
 8001254:	f001 ffd4 	bl	8003200 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001258:	2200      	movs	r2, #0
 800125a:	2104      	movs	r1, #4
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <LCD_IO_Init+0xec>)
 800125e:	f002 fa85 	bl	800376c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001262:	2201      	movs	r2, #1
 8001264:	2104      	movs	r1, #4
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <LCD_IO_Init+0xec>)
 8001268:	f002 fa80 	bl	800376c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800126c:	f7ff fed6 	bl	800101c <SPIx_Init>
  }
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000f8 	.word	0x200000f8
 800127c:	40023800 	.word	0x40023800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40020800 	.word	0x40020800

08001288 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <LCD_IO_WriteData+0x3c>)
 800129a:	f002 fa67 	bl	800376c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800129e:	2200      	movs	r2, #0
 80012a0:	2104      	movs	r1, #4
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <LCD_IO_WriteData+0x40>)
 80012a4:	f002 fa62 	bl	800376c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff10 	bl	80010d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012b0:	2201      	movs	r2, #1
 80012b2:	2104      	movs	r1, #4
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <LCD_IO_WriteData+0x40>)
 80012b6:	f002 fa59 	bl	800376c <HAL_GPIO_WritePin>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40020800 	.word	0x40020800

080012cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <LCD_IO_WriteReg+0x3c>)
 80012de:	f002 fa45 	bl	800376c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80012e2:	2200      	movs	r2, #0
 80012e4:	2104      	movs	r1, #4
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <LCD_IO_WriteReg+0x40>)
 80012e8:	f002 fa40 	bl	800376c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff feed 	bl	80010d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012f6:	2201      	movs	r2, #1
 80012f8:	2104      	movs	r1, #4
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <LCD_IO_WriteReg+0x40>)
 80012fc:	f002 fa36 	bl	800376c <HAL_GPIO_WritePin>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40020800 	.word	0x40020800

08001310 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001324:	2200      	movs	r2, #0
 8001326:	2104      	movs	r1, #4
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <LCD_IO_ReadData+0x5c>)
 800132a:	f002 fa1f 	bl	800376c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001334:	480e      	ldr	r0, [pc, #56]	; (8001370 <LCD_IO_ReadData+0x60>)
 8001336:	f002 fa19 	bl	800376c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fec7 	bl	80010d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fea3 	bl	8001090 <SPIx_Read>
 800134a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <LCD_IO_ReadData+0x60>)
 8001354:	f002 fa0a 	bl	800376c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001358:	2201      	movs	r2, #1
 800135a:	2104      	movs	r1, #4
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <LCD_IO_ReadData+0x5c>)
 800135e:	f002 fa05 	bl	800376c <HAL_GPIO_WritePin>
  
  return readvalue;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00

08001374 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f8c7 	bl	8002510 <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800138e:	f7ff fd51 	bl	8000e34 <I2Cx_Init>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800139a:	f7ff fd7d 	bl	8000e98 <I2Cx_ITConfig>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	460b      	mov	r3, r1
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80013b4:	797a      	ldrb	r2, [r7, #5]
 80013b6:	79b9      	ldrb	r1, [r7, #6]
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fd9e 	bl	8000efc <I2Cx_WriteData>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fdb6 	bl	8000f50 <I2Cx_ReadData>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	603a      	str	r2, [r7, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	460b      	mov	r3, r1
 80013fe:	71bb      	strb	r3, [r7, #6]
 8001400:	4613      	mov	r3, r2
 8001402:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	79b9      	ldrb	r1, [r7, #6]
 8001408:	79f8      	ldrb	r0, [r7, #7]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f7ff fdcc 	bl	8000fa8 <I2Cx_ReadBuffer>
 8001410:	4603      	mov	r3, r0
 8001412:	b29b      	uxth	r3, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 f873 	bl	8002510 <HAL_Delay>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <BSP_LCD_Init+0xbc>)
 800143a:	4a2e      	ldr	r2, [pc, #184]	; (80014f4 <BSP_LCD_Init+0xc0>)
 800143c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001440:	2209      	movs	r2, #9
 8001442:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001446:	2201      	movs	r2, #1
 8001448:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <BSP_LCD_Init+0xbc>)
 800144c:	221d      	movs	r2, #29
 800144e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001452:	2203      	movs	r2, #3
 8001454:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001458:	f240 120d 	movw	r2, #269	; 0x10d
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001460:	f240 1243 	movw	r2, #323	; 0x143
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001468:	f240 1217 	movw	r2, #279	; 0x117
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001470:	f240 1247 	movw	r2, #327	; 0x147
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <BSP_LCD_Init+0xbc>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <BSP_LCD_Init+0xc4>)
 8001490:	2208      	movs	r2, #8
 8001492:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <BSP_LCD_Init+0xc4>)
 8001496:	22c0      	movs	r2, #192	; 0xc0
 8001498:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <BSP_LCD_Init+0xc4>)
 800149c:	2204      	movs	r2, #4
 800149e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <BSP_LCD_Init+0xc4>)
 80014a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <BSP_LCD_Init+0xc4>)
 80014aa:	f005 fb3d 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <BSP_LCD_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <BSP_LCD_Init+0xbc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <BSP_LCD_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <BSP_LCD_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80014c6:	f000 fb39 	bl	8001b3c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <BSP_LCD_Init+0xbc>)
 80014cc:	f004 fb42 	bl	8005b54 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <BSP_LCD_Init+0xc8>)
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <BSP_LCD_Init+0xcc>)
 80014d4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <BSP_LCD_Init+0xc8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80014de:	f000 fd1b 	bl	8001f18 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <BSP_LCD_Init+0xd0>)
 80014e4:	f000 f8ce 	bl	8001684 <BSP_LCD_SetFont>

  return LCD_OK;
 80014e8:	2300      	movs	r3, #0
}  
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002b0 	.word	0x200002b0
 80014f4:	40016800 	.word	0x40016800
 80014f8:	2000013c 	.word	0x2000013c
 80014fc:	20000358 	.word	0x20000358
 8001500:	20000000 	.word	0x20000000
 8001504:	20000068 	.word	0x20000068

08001508 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <BSP_LCD_GetXSize+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	4798      	blx	r3
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000358 	.word	0x20000358

08001520 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <BSP_LCD_GetYSize+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4798      	blx	r3
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000358 	.word	0x20000358

08001538 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001548:	f7ff ffde 	bl	8001508 <BSP_LCD_GetXSize>
 800154c:	4603      	mov	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001554:	f7ff ffe4 	bl	8001520 <BSP_LCD_GetYSize>
 8001558:	4603      	mov	r3, r0
 800155a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001564:	23ff      	movs	r3, #255	; 0xff
 8001566:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800157e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001584:	2307      	movs	r3, #7
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001588:	f7ff ffbe 	bl	8001508 <BSP_LCD_GetXSize>
 800158c:	4603      	mov	r3, r0
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001590:	f7ff ffc6 	bl	8001520 <BSP_LCD_GetYSize>
 8001594:	4603      	mov	r3, r0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015a2:	f004 fc69 	bl	8005e78 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015a6:	88fa      	ldrh	r2, [r7, #6]
 80015a8:	4913      	ldr	r1, [pc, #76]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3304      	adds	r3, #4
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3308      	adds	r3, #8
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc4>)
 80015ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80015d0:	88fa      	ldrh	r2, [r7, #6]
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015e2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015e6:	f004 fc85 	bl	8005ef4 <HAL_LTDC_EnableDither>
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002b0 	.word	0x200002b0
 80015f8:	20000170 	.word	0x20000170
 80015fc:	20000068 	.word	0x20000068

08001600 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <BSP_LCD_SelectLayer+0x1c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000016c 	.word	0x2000016c

08001620 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <BSP_LCD_SetTextColor+0x28>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <BSP_LCD_SetTextColor+0x2c>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	2000016c 	.word	0x2000016c
 800164c:	20000170 	.word	0x20000170

08001650 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <BSP_LCD_SetBackColor+0x2c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <BSP_LCD_SetBackColor+0x30>)
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3304      	adds	r3, #4
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000016c 	.word	0x2000016c
 8001680:	20000170 	.word	0x20000170

08001684 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <BSP_LCD_SetFont+0x2c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4908      	ldr	r1, [pc, #32]	; (80016b4 <BSP_LCD_SetFont+0x30>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3308      	adds	r3, #8
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000016c 	.word	0x2000016c
 80016b4:	20000170 	.word	0x20000170

080016b8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af02      	add	r7, sp, #8
 80016be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <BSP_LCD_Clear+0x48>)
 80016c2:	681c      	ldr	r4, [r3, #0]
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <BSP_LCD_Clear+0x48>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <BSP_LCD_Clear+0x4c>)
 80016ca:	2134      	movs	r1, #52	; 0x34
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	335c      	adds	r3, #92	; 0x5c
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461d      	mov	r5, r3
 80016d8:	f7ff ff16 	bl	8001508 <BSP_LCD_GetXSize>
 80016dc:	4606      	mov	r6, r0
 80016de:	f7ff ff1f 	bl	8001520 <BSP_LCD_GetYSize>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	4632      	mov	r2, r6
 80016f0:	4629      	mov	r1, r5
 80016f2:	4620      	mov	r0, r4
 80016f4:	f000 fbd8 	bl	8001ea8 <FillBuffer>
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001700:	2000016c 	.word	0x2000016c
 8001704:	200002b0 	.word	0x200002b0

08001708 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
 8001712:	460b      	mov	r3, r1
 8001714:	80bb      	strh	r3, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <BSP_LCD_DisplayChar+0x80>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	491b      	ldr	r1, [pc, #108]	; (800178c <BSP_LCD_DisplayChar+0x84>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <BSP_LCD_DisplayChar+0x80>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4c14      	ldr	r4, [pc, #80]	; (800178c <BSP_LCD_DisplayChar+0x84>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4423      	add	r3, r4
 8001746:	3308      	adds	r3, #8
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800174c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <BSP_LCD_DisplayChar+0x80>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4c0d      	ldr	r4, [pc, #52]	; (800178c <BSP_LCD_DisplayChar+0x84>)
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4423      	add	r3, r4
 8001760:	3308      	adds	r3, #8
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	3307      	adds	r3, #7
 8001768:	2b00      	cmp	r3, #0
 800176a:	da00      	bge.n	800176e <BSP_LCD_DisplayChar+0x66>
 800176c:	3307      	adds	r3, #7
 800176e:	10db      	asrs	r3, r3, #3
 8001770:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001774:	18ca      	adds	r2, r1, r3
 8001776:	88b9      	ldrh	r1, [r7, #4]
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fada 	bl	8001d34 <DrawChar>
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	2000016c 	.word	0x2000016c
 800178c:	20000170 	.word	0x20000170

08001790 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	81fb      	strh	r3, [r7, #14]
 800179e:	460b      	mov	r3, r1
 80017a0:	81bb      	strh	r3, [r7, #12]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80017a6:	2301      	movs	r3, #1
 80017a8:	83fb      	strh	r3, [r7, #30]
 80017aa:	2300      	movs	r3, #0
 80017ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80017ba:	e002      	b.n	80017c2 <BSP_LCD_DisplayStringAt+0x32>
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	3301      	adds	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	617a      	str	r2, [r7, #20]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f6      	bne.n	80017bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017ce:	f7ff fe9b 	bl	8001508 <BSP_LCD_GetXSize>
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	494a      	ldr	r1, [pc, #296]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3308      	adds	r3, #8
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	889b      	ldrh	r3, [r3, #4]
 80017e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ec:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d01c      	beq.n	800182e <BSP_LCD_DisplayStringAt+0x9e>
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d017      	beq.n	8001828 <BSP_LCD_DisplayStringAt+0x98>
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d12e      	bne.n	800185a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad1      	subs	r1, r2, r3
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	483e      	ldr	r0, [pc, #248]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4403      	add	r3, r0
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	fb03 f301 	mul.w	r3, r3, r1
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	4413      	add	r3, r2
 8001824:	83fb      	strh	r3, [r7, #30]
      break;
 8001826:	e01b      	b.n	8001860 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001828:	89fb      	ldrh	r3, [r7, #14]
 800182a:	83fb      	strh	r3, [r7, #30]
      break;
 800182c:	e018      	b.n	8001860 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b299      	uxth	r1, r3
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4831      	ldr	r0, [pc, #196]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4403      	add	r3, r0
 8001846:	3308      	adds	r3, #8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	889b      	ldrh	r3, [r3, #4]
 800184c:	fb11 f303 	smulbb	r3, r1, r3
 8001850:	b29a      	uxth	r2, r3
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	4413      	add	r3, r2
 8001856:	83fb      	strh	r3, [r7, #30]
      break;
 8001858:	e002      	b.n	8001860 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	83fb      	strh	r3, [r7, #30]
      break;
 800185e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001860:	e01a      	b.n	8001898 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	89b9      	ldrh	r1, [r7, #12]
 8001868:	8bfb      	ldrh	r3, [r7, #30]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff4c 	bl	8001708 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	3308      	adds	r3, #8
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	889a      	ldrh	r2, [r3, #4]
 8001886:	8bfb      	ldrh	r3, [r7, #30]
 8001888:	4413      	add	r3, r2
 800188a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
    i++;
 8001892:	8bbb      	ldrh	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2dc      	uxtb	r4, r3
 80018a6:	f7ff fe2f 	bl	8001508 <BSP_LCD_GetXSize>
 80018aa:	4605      	mov	r5, r0
 80018ac:	8bb9      	ldrh	r1, [r7, #28]
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4403      	add	r3, r0
 80018be:	3308      	adds	r3, #8
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	889b      	ldrh	r3, [r3, #4]
 80018c4:	fb03 f301 	mul.w	r3, r3, r1
 80018c8:	1aeb      	subs	r3, r5, r3
 80018ca:	b299      	uxth	r1, r3
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <BSP_LCD_DisplayStringAt+0x16c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <BSP_LCD_DisplayStringAt+0x170>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4403      	add	r3, r0
 80018dc:	3308      	adds	r3, #8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	4299      	cmp	r1, r3
 80018e4:	bf2c      	ite	cs
 80018e6:	2301      	movcs	r3, #1
 80018e8:	2300      	movcc	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4023      	ands	r3, r4
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1b6      	bne.n	8001862 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	2000016c 	.word	0x2000016c
 8001900:	20000170 	.word	0x20000170

08001904 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <BSP_LCD_DrawHLine+0x74>)
 8001920:	2134      	movs	r1, #52	; 0x34
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	335c      	adds	r3, #92	; 0x5c
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	f7ff fdec 	bl	8001508 <BSP_LCD_GetXSize>
 8001930:	4602      	mov	r2, r0
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	fb03 f202 	mul.w	r2, r3, r2
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4423      	add	r3, r4
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	68fc      	ldr	r4, [r7, #12]
 8001948:	887d      	ldrh	r5, [r7, #2]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <BSP_LCD_DrawHLine+0x70>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	490b      	ldr	r1, [pc, #44]	; (800197c <BSP_LCD_DrawHLine+0x78>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	462a      	mov	r2, r5
 8001966:	4621      	mov	r1, r4
 8001968:	f000 fa9e 	bl	8001ea8 <FillBuffer>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	2000016c 	.word	0x2000016c
 8001978:	200002b0 	.word	0x200002b0
 800197c:	20000170 	.word	0x20000170

08001980 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
 800198a:	460b      	mov	r3, r1
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <BSP_LCD_DrawVLine+0x7c>)
 800199c:	2134      	movs	r1, #52	; 0x34
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	335c      	adds	r3, #92	; 0x5c
 80019a6:	681c      	ldr	r4, [r3, #0]
 80019a8:	f7ff fdae 	bl	8001508 <BSP_LCD_GetXSize>
 80019ac:	4602      	mov	r2, r0
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4423      	add	r3, r4
 80019bc:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	68fd      	ldr	r5, [r7, #12]
 80019c4:	887e      	ldrh	r6, [r7, #2]
 80019c6:	f7ff fd9f 	bl	8001508 <BSP_LCD_GetXSize>
 80019ca:	4603      	mov	r3, r0
 80019cc:	1e59      	subs	r1, r3, #1
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <BSP_LCD_DrawVLine+0x78>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <BSP_LCD_DrawVLine+0x80>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4403      	add	r3, r0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	4633      	mov	r3, r6
 80019e6:	2201      	movs	r2, #1
 80019e8:	4629      	mov	r1, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 fa5c 	bl	8001ea8 <FillBuffer>
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f8:	2000016c 	.word	0x2000016c
 80019fc:	200002b0 	.word	0x200002b0
 8001a00:	20000170 	.word	0x20000170

08001a04 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	80fb      	strh	r3, [r7, #6]
 8001a16:	4603      	mov	r3, r0
 8001a18:	80bb      	strh	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	88b9      	ldrh	r1, [r7, #4]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff6b 	bl	8001904 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001a2e:	88ba      	ldrh	r2, [r7, #4]
 8001a30:	883b      	ldrh	r3, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	b299      	uxth	r1, r3
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff62 	bl	8001904 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a40:	883a      	ldrh	r2, [r7, #0]
 8001a42:	88b9      	ldrh	r1, [r7, #4]
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff9a 	bl	8001980 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	4413      	add	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	883a      	ldrh	r2, [r7, #0]
 8001a56:	88b9      	ldrh	r1, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff91 	bl	8001980 <BSP_LCD_DrawVLine>
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
	...

08001a68 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af02      	add	r7, sp, #8
 8001a70:	4604      	mov	r4, r0
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	4623      	mov	r3, r4
 8001a7a:	80fb      	strh	r3, [r7, #6]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	80bb      	strh	r3, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <BSP_LCD_FillRect+0xa8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4920      	ldr	r1, [pc, #128]	; (8001b14 <BSP_LCD_FillRect+0xac>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fdbe 	bl	8001620 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <BSP_LCD_FillRect+0xa8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <BSP_LCD_FillRect+0xb0>)
 8001aaa:	2134      	movs	r1, #52	; 0x34
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	335c      	adds	r3, #92	; 0x5c
 8001ab4:	681c      	ldr	r4, [r3, #0]
 8001ab6:	f7ff fd27 	bl	8001508 <BSP_LCD_GetXSize>
 8001aba:	4602      	mov	r2, r0
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4423      	add	r3, r4
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <BSP_LCD_FillRect+0xa8>)
 8001ace:	681c      	ldr	r4, [r3, #0]
 8001ad0:	68fd      	ldr	r5, [r7, #12]
 8001ad2:	887e      	ldrh	r6, [r7, #2]
 8001ad4:	f8b7 8000 	ldrh.w	r8, [r7]
 8001ad8:	f7ff fd16 	bl	8001508 <BSP_LCD_GetXSize>
 8001adc:	4602      	mov	r2, r0
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	1ad1      	subs	r1, r2, r3
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <BSP_LCD_FillRect+0xa8>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <BSP_LCD_FillRect+0xac>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4403      	add	r3, r0
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	9100      	str	r1, [sp, #0]
 8001af8:	4643      	mov	r3, r8
 8001afa:	4632      	mov	r2, r6
 8001afc:	4629      	mov	r1, r5
 8001afe:	4620      	mov	r0, r4
 8001b00:	f000 f9d2 	bl	8001ea8 <FillBuffer>
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000016c 	.word	0x2000016c
 8001b14:	20000170 	.word	0x20000170
 8001b18:	200002b0 	.word	0x200002b0

08001b1c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <BSP_LCD_DisplayOn+0x1c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <BSP_LCD_DisplayOn+0x1c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4798      	blx	r3
  }
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000358 	.word	0x20000358

08001b3c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b48:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	4a5a      	ldr	r2, [pc, #360]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b80:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4a45      	ldr	r2, [pc, #276]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bb8:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <BSP_LCD_MspInit+0x190>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001c22:	f641 0358 	movw	r3, #6232	; 0x1858
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c30:	2302      	movs	r3, #2
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001c34:	230e      	movs	r3, #14
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <BSP_LCD_MspInit+0x194>)
 8001c40:	f001 fade 	bl	8003200 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001c44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <BSP_LCD_MspInit+0x198>)
 8001c52:	f001 fad5 	bl	8003200 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001c56:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <BSP_LCD_MspInit+0x19c>)
 8001c64:	f001 facc 	bl	8003200 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001c68:	2348      	movs	r3, #72	; 0x48
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	481a      	ldr	r0, [pc, #104]	; (8001cdc <BSP_LCD_MspInit+0x1a0>)
 8001c74:	f001 fac4 	bl	8003200 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <BSP_LCD_MspInit+0x1a4>)
 8001c86:	f001 fabb 	bl	8003200 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001c8a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <BSP_LCD_MspInit+0x1a8>)
 8001c98:	f001 fab2 	bl	8003200 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <BSP_LCD_MspInit+0x198>)
 8001cac:	f001 faa8 	bl	8003200 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <BSP_LCD_MspInit+0x1a8>)
 8001cbe:	f001 fa9f 	bl	8003200 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	3738      	adds	r7, #56	; 0x38
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021800 	.word	0x40021800

08001ce8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	603a      	str	r2, [r7, #0]
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <BSP_LCD_DrawPixel+0x44>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <BSP_LCD_DrawPixel+0x48>)
 8001cfe:	2134      	movs	r1, #52	; 0x34
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	335c      	adds	r3, #92	; 0x5c
 8001d08:	681c      	ldr	r4, [r3, #0]
 8001d0a:	88bd      	ldrh	r5, [r7, #4]
 8001d0c:	f7ff fbfc 	bl	8001508 <BSP_LCD_GetXSize>
 8001d10:	4603      	mov	r3, r0
 8001d12:	fb03 f205 	mul.w	r2, r3, r5
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4423      	add	r3, r4
 8001d1e:	461a      	mov	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2c:	2000016c 	.word	0x2000016c
 8001d30:	200002b0 	.word	0x200002b0

08001d34 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	603a      	str	r2, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
 8001d40:	460b      	mov	r3, r1
 8001d42:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <DrawChar+0x16c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4953      	ldr	r1, [pc, #332]	; (8001ea4 <DrawChar+0x170>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3308      	adds	r3, #8
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	88db      	ldrh	r3, [r3, #6]
 8001d66:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <DrawChar+0x16c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <DrawChar+0x170>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3308      	adds	r3, #8
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	889b      	ldrh	r3, [r3, #4]
 8001d7e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001d80:	8a3b      	ldrh	r3, [r7, #16]
 8001d82:	3307      	adds	r3, #7
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da00      	bge.n	8001d8a <DrawChar+0x56>
 8001d88:	3307      	adds	r3, #7
 8001d8a:	10db      	asrs	r3, r3, #3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	8a3b      	ldrh	r3, [r7, #16]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e076      	b.n	8001e8e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001da0:	8a3b      	ldrh	r3, [r7, #16]
 8001da2:	3307      	adds	r3, #7
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da00      	bge.n	8001daa <DrawChar+0x76>
 8001da8:	3307      	adds	r3, #7
 8001daa:	10db      	asrs	r3, r3, #3
 8001dac:	461a      	mov	r2, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fb03 f302 	mul.w	r3, r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001dba:	8a3b      	ldrh	r3, [r7, #16]
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da00      	bge.n	8001dc4 <DrawChar+0x90>
 8001dc2:	3307      	adds	r3, #7
 8001dc4:	10db      	asrs	r3, r3, #3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d002      	beq.n	8001dd0 <DrawChar+0x9c>
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d004      	beq.n	8001dd8 <DrawChar+0xa4>
 8001dce:	e00c      	b.n	8001dea <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	e016      	b.n	8001e06 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	3201      	adds	r2, #1
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
      break;
 8001de8:	e00d      	b.n	8001e06 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	041a      	lsls	r2, r3, #16
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3301      	adds	r3, #1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	3202      	adds	r2, #2
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
      break;
 8001e04:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e036      	b.n	8001e7a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001e0c:	8a3a      	ldrh	r2, [r7, #16]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad2      	subs	r2, r2, r3
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	4413      	add	r3, r2
 8001e16:	3b01      	subs	r3, #1
 8001e18:	2201      	movs	r2, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b298      	uxth	r0, r3
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <DrawChar+0x16c>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	491b      	ldr	r1, [pc, #108]	; (8001ea4 <DrawChar+0x170>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff ff4e 	bl	8001ce8 <BSP_LCD_DrawPixel>
 8001e4c:	e012      	b.n	8001e74 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4413      	add	r3, r2
 8001e56:	b298      	uxth	r0, r3
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <DrawChar+0x16c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4911      	ldr	r1, [pc, #68]	; (8001ea4 <DrawChar+0x170>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3304      	adds	r3, #4
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7ff ff3a 	bl	8001ce8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	8a3a      	ldrh	r2, [r7, #16]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d8c4      	bhi.n	8001e0c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	3301      	adds	r3, #1
 8001e86:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	8a7a      	ldrh	r2, [r7, #18]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d884      	bhi.n	8001da0 <DrawChar+0x6c>
  }
}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000016c 	.word	0x2000016c
 8001ea4:	20000170 	.word	0x20000170

08001ea8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <FillBuffer+0x68>)
 8001eb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ebc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <FillBuffer+0x68>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FillBuffer+0x68>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <FillBuffer+0x68>)
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <FillBuffer+0x6c>)
 8001ece:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001ed0:	480f      	ldr	r0, [pc, #60]	; (8001f10 <FillBuffer+0x68>)
 8001ed2:	f000 fdfb 	bl	8002acc <HAL_DMA2D_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d115      	bne.n	8001f08 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	480c      	ldr	r0, [pc, #48]	; (8001f10 <FillBuffer+0x68>)
 8001ee0:	f001 f862 	bl	8002fa8 <HAL_DMA2D_ConfigLayer>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69f9      	ldr	r1, [r7, #28]
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <FillBuffer+0x68>)
 8001ef6:	f000 fe32 	bl	8002b5e <HAL_DMA2D_Start>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001f00:	210a      	movs	r1, #10
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <FillBuffer+0x68>)
 8001f04:	f000 fe56 	bl	8002bb4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200000fc 	.word	0x200000fc
 8001f14:	4002b000 	.word	0x4002b000

08001f18 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <BSP_SDRAM_Init+0xb0>)
 8001f20:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f30:	2204      	movs	r2, #4
 8001f32:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f36:	2207      	movs	r2, #7
 8001f38:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f60:	2210      	movs	r2, #16
 8001f62:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f6c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001f70:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f92:	f000 f87f 	bl	8002094 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <BSP_SDRAM_Init+0xb4>)
 8001f98:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <BSP_SDRAM_Init+0xac>)
 8001f9a:	f004 ff69 	bl	8006e70 <HAL_SDRAM_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <BSP_SDRAM_Init+0xb8>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e002      	b.n	8001fb2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <BSP_SDRAM_Init+0xb8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001fb2:	f240 506a 	movw	r0, #1386	; 0x56a
 8001fb6:	f000 f80d 	bl	8001fd4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <BSP_SDRAM_Init+0xb8>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000188 	.word	0x20000188
 8001fc8:	a0000140 	.word	0xa0000140
 8001fcc:	200001bc 	.word	0x200001bc
 8001fd0:	20000078 	.word	0x20000078

08001fd4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fe8:	2208      	movs	r2, #8
 8001fea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffc:	4923      	ldr	r1, [pc, #140]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ffe:	4824      	ldr	r0, [pc, #144]	; (8002090 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002000:	f004 ff6a 	bl	8006ed8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002004:	2001      	movs	r0, #1
 8002006:	f000 fa83 	bl	8002510 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800200c:	2202      	movs	r2, #2
 800200e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002012:	2208      	movs	r2, #8
 8002014:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002018:	2201      	movs	r2, #1
 800201a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	4919      	ldr	r1, [pc, #100]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002028:	4819      	ldr	r0, [pc, #100]	; (8002090 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800202a:	f004 ff55 	bl	8006ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002030:	2203      	movs	r2, #3
 8002032:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002036:	2208      	movs	r2, #8
 8002038:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800203c:	2204      	movs	r2, #4
 800203e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204a:	4910      	ldr	r1, [pc, #64]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800204c:	4810      	ldr	r0, [pc, #64]	; (8002090 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800204e:	f004 ff43 	bl	8006ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002052:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002056:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800205a:	2204      	movs	r2, #4
 800205c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002060:	2208      	movs	r2, #8
 8002062:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002066:	2201      	movs	r2, #1
 8002068:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800206e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002074:	4905      	ldr	r1, [pc, #20]	; (800208c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002076:	4806      	ldr	r0, [pc, #24]	; (8002090 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002078:	f004 ff2e 	bl	8006ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4804      	ldr	r0, [pc, #16]	; (8002090 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002080:	f004 ff55 	bl	8006f2e <HAL_SDRAM_ProgramRefreshRate>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200001d8 	.word	0x200001d8
 8002090:	20000188 	.word	0x20000188

08002094 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b090      	sub	sp, #64	; 0x40
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80ec 	beq.w	800227e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020aa:	4a77      	ldr	r2, [pc, #476]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020ac:	4b76      	ldr	r3, [pc, #472]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38
 80020b6:	4b74      	ldr	r3, [pc, #464]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	4a70      	ldr	r2, [pc, #448]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020c8:	4b6f      	ldr	r3, [pc, #444]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	4a69      	ldr	r2, [pc, #420]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	4a62      	ldr	r2, [pc, #392]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	4a5b      	ldr	r2, [pc, #364]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 800211c:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	4a54      	ldr	r2, [pc, #336]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4a4d      	ldr	r2, [pc, #308]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002154:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4a46      	ldr	r2, [pc, #280]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002170:	4b45      	ldr	r3, [pc, #276]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <BSP_SDRAM_MspInit+0x1f4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800218a:	2302      	movs	r3, #2
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002192:	230c      	movs	r3, #12
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002196:	2360      	movs	r3, #96	; 0x60
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800219a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219e:	4619      	mov	r1, r3
 80021a0:	483a      	ldr	r0, [pc, #232]	; (800228c <BSP_SDRAM_MspInit+0x1f8>)
 80021a2:	f001 f82d 	bl	8003200 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80021a6:	2301      	movs	r3, #1
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80021aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	4837      	ldr	r0, [pc, #220]	; (8002290 <BSP_SDRAM_MspInit+0x1fc>)
 80021b2:	f001 f825 	bl	8003200 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80021b6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4834      	ldr	r0, [pc, #208]	; (8002294 <BSP_SDRAM_MspInit+0x200>)
 80021c4:	f001 f81c 	bl	8003200 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80021c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4830      	ldr	r0, [pc, #192]	; (8002298 <BSP_SDRAM_MspInit+0x204>)
 80021d6:	f001 f813 	bl	8003200 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80021da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	482d      	ldr	r0, [pc, #180]	; (800229c <BSP_SDRAM_MspInit+0x208>)
 80021e8:	f001 f80a 	bl	8003200 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80021ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f6:	4619      	mov	r1, r3
 80021f8:	4829      	ldr	r0, [pc, #164]	; (80022a0 <BSP_SDRAM_MspInit+0x20c>)
 80021fa:	f001 f801 	bl	8003200 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800220c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002210:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002218:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800221c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002220:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002224:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002228:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002236:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002240:	2203      	movs	r2, #3
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <BSP_SDRAM_MspInit+0x214>)
 8002254:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002262:	4810      	ldr	r0, [pc, #64]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 8002264:	f000 fb24 	bl	80028b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <BSP_SDRAM_MspInit+0x210>)
 800226a:	f000 fa73 	bl	8002754 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	210f      	movs	r1, #15
 8002272:	2038      	movs	r0, #56	; 0x38
 8002274:	f000 fa24 	bl	80026c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002278:	2038      	movs	r0, #56	; 0x38
 800227a:	f000 fa3d 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800227e:	bf00      	nop
 8002280:	3740      	adds	r7, #64	; 0x40
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40020400 	.word	0x40020400
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40021000 	.word	0x40021000
 800229c:	40021400 	.word	0x40021400
 80022a0:	40021800 	.word	0x40021800
 80022a4:	200001e8 	.word	0x200001e8
 80022a8:	40026410 	.word	0x40026410

080022ac <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	80fb      	strh	r3, [r7, #6]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80022c0:	4a13      	ldr	r2, [pc, #76]	; (8002310 <BSP_TS_Init+0x64>)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <BSP_TS_Init+0x68>)
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <BSP_TS_Init+0x6c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2082      	movs	r0, #130	; 0x82
 80022d2:	4798      	blx	r3
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	f640 0311 	movw	r3, #2065	; 0x811
 80022dc:	429a      	cmp	r2, r3
 80022de:	d104      	bne.n	80022ea <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <BSP_TS_Init+0x70>)
 80022e2:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <BSP_TS_Init+0x6c>)
 80022e4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <BSP_TS_Init+0x70>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2082      	movs	r0, #130	; 0x82
 80022f8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <BSP_TS_Init+0x70>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2082      	movs	r0, #130	; 0x82
 8002302:	4798      	blx	r3
  }

  return ret;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000024c 	.word	0x2000024c
 8002314:	2000024e 	.word	0x2000024e
 8002318:	20000038 	.word	0x20000038
 800231c:	20000248 	.word	0x20000248

08002320 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <BSP_TS_GetState+0x14c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2082      	movs	r0, #130	; 0x82
 8002330:	4798      	blx	r3
 8002332:	4603      	mov	r3, r0
 8002334:	b29a      	uxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8090 	beq.w	8002464 <BSP_TS_GetState+0x144>
  {
	  detect = 1;
 8002344:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <BSP_TS_GetState+0x150>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <BSP_TS_GetState+0x14c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f107 020c 	add.w	r2, r7, #12
 8002354:	f107 010e 	add.w	r1, r7, #14
 8002358:	2082      	movs	r0, #130	; 0x82
 800235a:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002362:	b29b      	uxth	r3, r3
 8002364:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	4a42      	ldr	r2, [pc, #264]	; (8002474 <BSP_TS_GetState+0x154>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8002372:	8abb      	ldrh	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <BSP_TS_GetState+0x5e>
    {
      yr = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	82bb      	strh	r3, [r7, #20]
 800237c:	e008      	b.n	8002390 <BSP_TS_GetState+0x70>
    }
    else if (yr > TsYBoundary)
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <BSP_TS_GetState+0x158>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	8aba      	ldrh	r2, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	d903      	bls.n	8002390 <BSP_TS_GetState+0x70>
    {
      yr = TsYBoundary - 1;
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <BSP_TS_GetState+0x158>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3b01      	subs	r3, #1
 800238e:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8002390:	8abb      	ldrh	r3, [r7, #20]
 8002392:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8002394:	89fb      	ldrh	r3, [r7, #14]
 8002396:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800239a:	4293      	cmp	r3, r2
 800239c:	d806      	bhi.n	80023ac <BSP_TS_GetState+0x8c>
    {
      x = 3870 - x;
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80023a4:	330e      	adds	r3, #14
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	81fb      	strh	r3, [r7, #14]
 80023aa:	e005      	b.n	80023b8 <BSP_TS_GetState+0x98>
    }
    else
    {
      x = 3800 - x;
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80023b2:	3308      	adds	r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80023b8:	89fb      	ldrh	r3, [r7, #14]
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <BSP_TS_GetState+0x15c>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80023c4:	8afb      	ldrh	r3, [r7, #22]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <BSP_TS_GetState+0xb0>
    {
      xr = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	82fb      	strh	r3, [r7, #22]
 80023ce:	e008      	b.n	80023e2 <BSP_TS_GetState+0xc2>
    }
    else if (xr > TsXBoundary)
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <BSP_TS_GetState+0x160>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	8afa      	ldrh	r2, [r7, #22]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d903      	bls.n	80023e2 <BSP_TS_GetState+0xc2>
    {
      xr = TsXBoundary - 1;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <BSP_TS_GetState+0x160>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	3b01      	subs	r3, #1
 80023e0:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80023e2:	8afb      	ldrh	r3, [r7, #22]
 80023e4:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <BSP_TS_GetState+0x164>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d906      	bls.n	8002400 <BSP_TS_GetState+0xe0>
 80023f2:	89fa      	ldrh	r2, [r7, #14]
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <BSP_TS_GetState+0x164>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	e005      	b.n	800240c <BSP_TS_GetState+0xec>
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <BSP_TS_GetState+0x164>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	b29a      	uxth	r2, r3
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	b29b      	uxth	r3, r3
 800240c:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800240e:	89bb      	ldrh	r3, [r7, #12]
 8002410:	461a      	mov	r2, r3
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <BSP_TS_GetState+0x168>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d906      	bls.n	8002428 <BSP_TS_GetState+0x108>
 800241a:	89ba      	ldrh	r2, [r7, #12]
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <BSP_TS_GetState+0x168>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	e005      	b.n	8002434 <BSP_TS_GetState+0x114>
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <BSP_TS_GetState+0x168>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29a      	uxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	b29b      	uxth	r3, r3
 8002434:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8002436:	8a7a      	ldrh	r2, [r7, #18]
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	2b05      	cmp	r3, #5
 800243e:	dd07      	ble.n	8002450 <BSP_TS_GetState+0x130>
    {
      _x = x;
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	461a      	mov	r2, r3
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <BSP_TS_GetState+0x164>)
 8002446:	601a      	str	r2, [r3, #0]
      _y = y; 
 8002448:	89bb      	ldrh	r3, [r7, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <BSP_TS_GetState+0x168>)
 800244e:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <BSP_TS_GetState+0x164>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <BSP_TS_GetState+0x168>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	809a      	strh	r2, [r3, #4]
  }
}
 8002464:	bf00      	nop
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000248 	.word	0x20000248
 8002470:	2000035c 	.word	0x2000035c
 8002474:	ba2e8ba3 	.word	0xba2e8ba3
 8002478:	2000024e 	.word	0x2000024e
 800247c:	88888889 	.word	0x88888889
 8002480:	2000024c 	.word	0x2000024c
 8002484:	20000250 	.word	0x20000250
 8002488:	20000254 	.word	0x20000254

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_Init+0x40>)
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_Init+0x40>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <HAL_Init+0x40>)
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_Init+0x40>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_Init+0x40>)
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x40>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 f8f8 	bl	80026aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f007 fb54 	bl	8009b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f007 fb2a 	bl	8009b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000079 	.word	0x20000079
 80024f4:	20000360 	.word	0x20000360

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000360 	.word	0x20000360

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_Delay+0x40>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3f7      	bcc.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000079 	.word	0x20000079

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	4909      	ldr	r1, [pc, #36]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	490d      	ldr	r1, [pc, #52]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	4909      	ldr	r1, [pc, #36]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	2201      	movs	r2, #1
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	401a      	ands	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268e:	2101      	movs	r1, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	1e59      	subs	r1, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff4e 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d2:	f7ff ff63 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f7ff ffb3 	bl	8002648 <NVIC_EncodePriority>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff82 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff56 	bl	80025b8 <__NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e011      	b.n	800274a <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	795b      	ldrb	r3, [r3, #5]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f006 fa3a 	bl	8008bb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff feca 	bl	80024f8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e099      	b.n	80028a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002790:	e00f      	b.n	80027b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002792:	f7ff feb1 	bl	80024f8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b05      	cmp	r3, #5
 800279e:	d908      	bls.n	80027b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e078      	b.n	80028a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e8      	bne.n	8002792 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4b38      	ldr	r3, [pc, #224]	; (80028ac <HAL_DMA_Init+0x158>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4313      	orrs	r3, r2
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2b04      	cmp	r3, #4
 8002844:	d117      	bne.n	8002876 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f8bd 	bl	80029d8 <DMA_CheckFifoParam>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002872:	2301      	movs	r3, #1
 8002874:	e016      	b.n	80028a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f874 	bl	800296c <DMA_CalcBaseAndBitshift>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	223f      	movs	r2, #63	; 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	f010803f 	.word	0xf010803f

080028b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e050      	b.n	8002964 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e048      	b.n	8002964 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2221      	movs	r2, #33	; 0x21
 8002910:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f82a 	bl	800296c <DMA_CalcBaseAndBitshift>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	223f      	movs	r2, #63	; 0x3f
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b10      	subs	r3, #16
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <DMA_CalcBaseAndBitshift+0x64>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d909      	bls.n	80029ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
 80029ac:	e007      	b.n	80029be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	0800c730 	.word	0x0800c730

080029d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d855      	bhi.n	8002aa4 <DMA_CheckFifoParam+0xcc>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d045      	beq.n	8002aa8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e042      	b.n	8002aa8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d13f      	bne.n	8002aac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e03c      	b.n	8002aac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d121      	bne.n	8002a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d836      	bhi.n	8002ab0 <DMA_CheckFifoParam+0xd8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <DMA_CheckFifoParam+0x70>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a5f 	.word	0x08002a5f
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e02f      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e021      	b.n	8002ab4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a78:	d11e      	bne.n	8002ab8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7e:	e01b      	b.n	8002ab8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <DMA_CheckFifoParam+0xb4>
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a8a:	e018      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e015      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e00b      	b.n	8002abc <DMA_CheckFifoParam+0xe4>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e00a      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e008      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aac:	bf00      	nop
 8002aae:	e006      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab0:	bf00      	nop
 8002ab2:	e004      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002abc:	bf00      	nop
    }
  } 
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e03b      	b.n	8002b56 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f006 f8b0 	bl	8008c58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6852      	ldr	r2, [r2, #4]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b20:	f022 0107 	bic.w	r1, r2, #7
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68c9      	ldr	r1, [r1, #12]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA2D_Start+0x1c>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e018      	b.n	8002bac <HAL_DMA2D_Start+0x4e>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fa97 	bl	80030c8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d056      	beq.n	8002c7e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002bd0:	f7ff fc92 	bl	80024f8 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002bd6:	e04b      	b.n	8002c70 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0a5      	b.n	8002d7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c38:	d01a      	beq.n	8002c70 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002c3a:	f7ff fc5d 	bl	80024f8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d802      	bhi.n	8002c50 <HAL_DMA2D_PollForTransfer+0x9c>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e086      	b.n	8002d7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ac      	beq.n	8002bd8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d061      	beq.n	8002d64 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7ff fc2a 	bl	80024f8 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ca6:	e056      	b.n	8002d56 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02e      	beq.n	8002d18 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2229      	movs	r2, #41	; 0x29
 8002d02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d01a      	beq.n	8002d56 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002d20:	f7ff fbea 	bl	80024f8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad2      	subs	r2, r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d802      	bhi.n	8002d36 <HAL_DMA2D_PollForTransfer+0x182>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2203      	movs	r2, #3
 8002d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e013      	b.n	8002d7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0a1      	beq.n	8002ca8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2212      	movs	r2, #18
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d026      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d021      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d026      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e18:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	f043 0202 	orr.w	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2204      	movs	r2, #4
 8002e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d026      	beq.n	8002ea6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d021      	beq.n	8002ea6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2208      	movs	r2, #8
 8002e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f853 	bl	8002f7e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d024      	beq.n	8002f2c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01f      	beq.n	8002f2c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2202      	movs	r2, #2
 8002f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01f      	beq.n	8002f76 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01a      	beq.n	8002f76 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2210      	movs	r2, #16
 8002f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f80e 	bl	8002f92 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA2D_ConfigLayer+0x20>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e077      	b.n	80030b8 <HAL_DMA2D_ConfigLayer+0x110>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	3318      	adds	r3, #24
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_DMA2D_ConfigLayer+0x11c>)
 8002ff4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b0a      	cmp	r3, #10
 8002ffc:	d003      	beq.n	8003006 <HAL_DMA2D_ConfigLayer+0x5e>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b09      	cmp	r3, #9
 8003004:	d107      	bne.n	8003016 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e005      	b.n	8003022 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11f      	bne.n	8003068 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	43d2      	mvns	r2, r2
 8003036:	4011      	ands	r1, r2
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	430a      	orrs	r2, r1
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b0a      	cmp	r3, #10
 800304e:	d003      	beq.n	8003058 <HAL_DMA2D_ConfigLayer+0xb0>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b09      	cmp	r3, #9
 8003056:	d126      	bne.n	80030a6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68d2      	ldr	r2, [r2, #12]
 8003060:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
 8003066:	e01e      	b.n	80030a6 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	69d1      	ldr	r1, [r2, #28]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	43d2      	mvns	r2, r2
 8003076:	4011      	ands	r1, r2
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	430a      	orrs	r2, r1
 800307c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b0a      	cmp	r3, #10
 800308e:	d003      	beq.n	8003098 <HAL_DMA2D_ConfigLayer+0xf0>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b09      	cmp	r3, #9
 8003096:	d106      	bne.n	80030a6 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68d2      	ldr	r2, [r2, #12]
 80030a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80030a4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	ff03000f 	.word	0xff03000f

080030c8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08b      	sub	sp, #44	; 0x2c
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030e0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	0410      	lsls	r0, r2, #16
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	4302      	orrs	r2, r0
 80030ec:	430a      	orrs	r2, r1
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003100:	d174      	bne.n	80031ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003108:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003110:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003118:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d108      	bne.n	800313a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	431a      	orrs	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
 8003138:	e053      	b.n	80031e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	431a      	orrs	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	e048      	b.n	80031e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d111      	bne.n	800317c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	0cdb      	lsrs	r3, r3, #19
 800315c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	0a9b      	lsrs	r3, r3, #10
 8003162:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08db      	lsrs	r3, r3, #3
 8003168:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	02db      	lsls	r3, r3, #11
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	e032      	b.n	80031e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d117      	bne.n	80031b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	0fdb      	lsrs	r3, r3, #31
 8003188:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	0cdb      	lsrs	r3, r3, #19
 800318e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0adb      	lsrs	r3, r3, #11
 8003194:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	029b      	lsls	r3, r3, #10
 80031a4:	431a      	orrs	r2, r3
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	03db      	lsls	r3, r3, #15
 80031aa:	431a      	orrs	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e016      	b.n	80031e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	0f1b      	lsrs	r3, r3, #28
 80031b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	0d1b      	lsrs	r3, r3, #20
 80031be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	0b1b      	lsrs	r3, r3, #12
 80031c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	011a      	lsls	r2, r3, #4
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	431a      	orrs	r2, r3
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	031b      	lsls	r3, r3, #12
 80031da:	431a      	orrs	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031ea:	e003      	b.n	80031f4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	60da      	str	r2, [r3, #12]
}
 80031f4:	bf00      	nop
 80031f6:	372c      	adds	r7, #44	; 0x2c
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e177      	b.n	800350c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8166 	bne.w	8003506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x4a>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80c0 	beq.w	8003506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_GPIO_Init+0x320>)
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_GPIO_Init+0x320>)
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_GPIO_Init+0x320>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a2:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_GPIO_Init+0x324>)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_GPIO_Init+0x328>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d037      	beq.n	800343e <HAL_GPIO_Init+0x23e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a56      	ldr	r2, [pc, #344]	; (800352c <HAL_GPIO_Init+0x32c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d031      	beq.n	800343a <HAL_GPIO_Init+0x23a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a55      	ldr	r2, [pc, #340]	; (8003530 <HAL_GPIO_Init+0x330>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <HAL_GPIO_Init+0x236>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <HAL_GPIO_Init+0x334>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x232>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a53      	ldr	r2, [pc, #332]	; (8003538 <HAL_GPIO_Init+0x338>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x22e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_GPIO_Init+0x33c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x22a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a51      	ldr	r2, [pc, #324]	; (8003540 <HAL_GPIO_Init+0x340>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x226>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a50      	ldr	r2, [pc, #320]	; (8003544 <HAL_GPIO_Init+0x344>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x222>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4f      	ldr	r2, [pc, #316]	; (8003548 <HAL_GPIO_Init+0x348>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x21e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4e      	ldr	r2, [pc, #312]	; (800354c <HAL_GPIO_Init+0x34c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x21a>
 8003416:	2309      	movs	r3, #9
 8003418:	e012      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800341a:	230a      	movs	r3, #10
 800341c:	e010      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800341e:	2308      	movs	r3, #8
 8003420:	e00e      	b.n	8003440 <HAL_GPIO_Init+0x240>
 8003422:	2307      	movs	r3, #7
 8003424:	e00c      	b.n	8003440 <HAL_GPIO_Init+0x240>
 8003426:	2306      	movs	r3, #6
 8003428:	e00a      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800342a:	2305      	movs	r3, #5
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x240>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x240>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x240>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4934      	ldr	r1, [pc, #208]	; (8003524 <HAL_GPIO_Init+0x324>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345e:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_GPIO_Init+0x350>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003482:	4a33      	ldr	r2, [pc, #204]	; (8003550 <HAL_GPIO_Init+0x350>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_GPIO_Init+0x350>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_GPIO_Init+0x350>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_GPIO_Init+0x350>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_GPIO_Init+0x350>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_GPIO_Init+0x350>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <HAL_GPIO_Init+0x350>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f ae84 	bls.w	800321c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	3724      	adds	r7, #36	; 0x24
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40023800 	.word	0x40023800
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40022000 	.word	0x40022000
 800354c:	40022400 	.word	0x40022400
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e0da      	b.n	8003726 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003570:	2201      	movs	r2, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	f040 80ca 	bne.w	8003720 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800358c:	4a6b      	ldr	r2, [pc, #428]	; (800373c <HAL_GPIO_DeInit+0x1e8>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a63      	ldr	r2, [pc, #396]	; (8003740 <HAL_GPIO_DeInit+0x1ec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d037      	beq.n	8003626 <HAL_GPIO_DeInit+0xd2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a62      	ldr	r2, [pc, #392]	; (8003744 <HAL_GPIO_DeInit+0x1f0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d031      	beq.n	8003622 <HAL_GPIO_DeInit+0xce>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_GPIO_DeInit+0x1f4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02b      	beq.n	800361e <HAL_GPIO_DeInit+0xca>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a60      	ldr	r2, [pc, #384]	; (800374c <HAL_GPIO_DeInit+0x1f8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d025      	beq.n	800361a <HAL_GPIO_DeInit+0xc6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a5f      	ldr	r2, [pc, #380]	; (8003750 <HAL_GPIO_DeInit+0x1fc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <HAL_GPIO_DeInit+0xc2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_GPIO_DeInit+0x200>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_DeInit+0xbe>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_GPIO_DeInit+0x204>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_DeInit+0xba>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_GPIO_DeInit+0x208>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_DeInit+0xb6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a5b      	ldr	r2, [pc, #364]	; (8003760 <HAL_GPIO_DeInit+0x20c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_DeInit+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a5a      	ldr	r2, [pc, #360]	; (8003764 <HAL_GPIO_DeInit+0x210>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_DeInit+0xae>
 80035fe:	2309      	movs	r3, #9
 8003600:	e012      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003602:	230a      	movs	r3, #10
 8003604:	e010      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003606:	2308      	movs	r3, #8
 8003608:	e00e      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 800360a:	2307      	movs	r3, #7
 800360c:	e00c      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 800360e:	2306      	movs	r3, #6
 8003610:	e00a      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003612:	2305      	movs	r3, #5
 8003614:	e008      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003616:	2304      	movs	r3, #4
 8003618:	e006      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 800361a:	2303      	movs	r3, #3
 800361c:	e004      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 800361e:	2302      	movs	r3, #2
 8003620:	e002      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_GPIO_DeInit+0xd4>
 8003626:	2300      	movs	r3, #0
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	f002 0203 	and.w	r2, r2, #3
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	fa03 f202 	lsl.w	r2, r3, r2
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d132      	bne.n	80036a0 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800364a:	483c      	ldr	r0, [pc, #240]	; (800373c <HAL_GPIO_DeInit+0x1e8>)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	493a      	ldr	r1, [pc, #232]	; (800373c <HAL_GPIO_DeInit+0x1e8>)
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	0892      	lsrs	r2, r2, #2
 8003656:	3202      	adds	r2, #2
 8003658:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	43d2      	mvns	r2, r2
 8003660:	400a      	ands	r2, r1
 8003662:	3302      	adds	r3, #2
 8003664:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003668:	493f      	ldr	r1, [pc, #252]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43db      	mvns	r3, r3
 8003672:	4013      	ands	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 8003678:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	4013      	ands	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003684:	4938      	ldr	r1, [pc, #224]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	4013      	ands	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003692:	4935      	ldr	r1, [pc, #212]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_GPIO_DeInit+0x214>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43db      	mvns	r3, r3
 800369c:	4013      	ands	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2103      	movs	r1, #3
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	08d9      	lsrs	r1, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3108      	adds	r1, #8
 80036c2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	200f      	movs	r0, #15
 80036d0:	fa00 f303 	lsl.w	r3, r0, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4019      	ands	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	2103      	movs	r1, #3
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	2101      	movs	r1, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	401a      	ands	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2103      	movs	r1, #3
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3301      	adds	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	f67f af21 	bls.w	8003570 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40013800 	.word	0x40013800
 8003740:	40020000 	.word	0x40020000
 8003744:	40020400 	.word	0x40020400
 8003748:	40020800 	.word	0x40020800
 800374c:	40020c00 	.word	0x40020c00
 8003750:	40021000 	.word	0x40021000
 8003754:	40021400 	.word	0x40021400
 8003758:	40021800 	.word	0x40021800
 800375c:	40021c00 	.word	0x40021c00
 8003760:	40022000 	.word	0x40022000
 8003764:	40022400 	.word	0x40022400
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003788:	e003      	b.n	8003792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 ff0d 	bl	80085d4 <USB_GetMode>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 80f2 	bne.w	80039a6 <HAL_HCD_IRQHandler+0x208>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fef1 	bl	80085ae <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80e8 	beq.w	80039a4 <HAL_HCD_IRQHandler+0x206>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fee8 	bl	80085ae <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e8:	d104      	bne.n	80037f4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fed8 	bl	80085ae <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003808:	d104      	bne.n	8003814 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003812:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f004 fec8 	bl	80085ae <USB_ReadInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003828:	d104      	bne.n	8003834 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003832:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f004 feb8 	bl	80085ae <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d103      	bne.n	8003850 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2202      	movs	r2, #2
 800384e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f004 feaa 	bl	80085ae <USB_ReadInterrupts>
 800385a:	4603      	mov	r3, r0
 800385c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003864:	d118      	bne.n	8003898 <HAL_HCD_IRQHandler+0xfa>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800386c:	461a      	mov	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800387a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f006 faf3 	bl	8009e68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f004 feb1 	bl	80085f0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f004 fe86 	bl	80085ae <USB_ReadInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ac:	d102      	bne.n	80038b4 <HAL_HCD_IRQHandler+0x116>
    {
      HCD_Port_IRQHandler(hhcd);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 f888 	bl	80049c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 fe78 	bl	80085ae <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d106      	bne.n	80038d6 <HAL_HCD_IRQHandler+0x138>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f006 fab1 	bl	8009e30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2208      	movs	r2, #8
 80038d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fe67 	bl	80085ae <USB_ReadInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ea:	d138      	bne.n	800395e <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 fef4 	bl	80086de <USB_HC_ReadInterrupt>
 80038f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e025      	b.n	800394a <HAL_HCD_IRQHandler+0x1ac>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003928:	d106      	bne.n	8003938 <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f87b 	bl	8003a2c <HCD_HC_IN_IRQHandler>
 8003936:	e005      	b.n	8003944 <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fc15 	bl	800416e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8d4      	bhi.n	80038fe <HAL_HCD_IRQHandler+0x160>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fe23 	bl	80085ae <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	d101      	bne.n	8003976 <HAL_HCD_IRQHandler+0x1d8>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_HCD_IRQHandler+0x1da>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d014      	beq.n	80039a6 <HAL_HCD_IRQHandler+0x208>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	6992      	ldr	r2, [r2, #24]
 8003986:	f022 0210 	bic.w	r2, r2, #16
 800398a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 ff6d 	bl	800486c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6992      	ldr	r2, [r2, #24]
 800399c:	f042 0210 	orr.w	r2, r2, #16
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e000      	b.n	80039a6 <HAL_HCD_IRQHandler+0x208>
      return;
 80039a4:	bf00      	nop
    }
  }
}
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_HCD_Start+0x16>
 80039be:	2302      	movs	r3, #2
 80039c0:	e013      	b.n	80039ea <HAL_HCD_Start+0x3e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fd5a 	bl	8008488 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fe44 	bl	8008668 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_HCD_Stop+0x16>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e00d      	b.n	8003a24 <HAL_HCD_Stop+0x32>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 ff7c 	bl	8008912 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d11a      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	60cb      	str	r3, [r1, #12]
 8003a90:	e097      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d109      	bne.n	8003abc <HCD_HC_IN_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	e082      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d135      	bne.n	8003b3e <HCD_HC_IN_IRQHandler+0x112>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	4619      	mov	r1, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	335d      	adds	r3, #93	; 0x5d
 8003b04:	2205      	movs	r2, #5
 8003b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	2308      	movs	r3, #8
 8003b2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fde2 	bl	8008700 <USB_HC_Halt>
 8003b3c:	e041      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b54:	d135      	bne.n	8003bc2 <HCD_HC_IN_IRQHandler+0x196>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	4619      	mov	r1, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 fdbc 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2310      	movs	r3, #16
 8003b98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	335d      	adds	r3, #93	; 0x5d
 8003baa:	2208      	movs	r2, #8
 8003bac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d123      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0x1f6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	4619      	mov	r1, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f004 fd7a 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c20:	e2a1      	b.n	8004166 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 80c3 	bne.w	8003dc0 <HCD_HC_IN_IRQHandler+0x394>
    if (hhcd->Init.dma_enable != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01b      	beq.n	8003c7a <HCD_HC_IN_IRQHandler+0x24e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	440b      	add	r3, r1
 8003c50:	3348      	adds	r3, #72	; 0x48
 8003c52:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	0159      	lsls	r1, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c66:	1ad1      	subs	r1, r2, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4403      	add	r3, r0
 8003c76:	334c      	adds	r3, #76	; 0x4c
 8003c78:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	440b      	add	r3, r1
 8003c88:	335d      	adds	r3, #93	; 0x5d
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3358      	adds	r3, #88	; 0x58
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HCD_HC_IN_IRQHandler+0x2b4>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	333f      	adds	r3, #63	; 0x3f
 8003cda:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d122      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0x2fa>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	4619      	mov	r1, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 fcf7 	bl	8008700 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2310      	movs	r3, #16
 8003d22:	6093      	str	r3, [r2, #8]
 8003d24:	e035      	b.n	8003d92 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	333f      	adds	r3, #63	; 0x3f
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d12a      	bne.n	8003d92 <HCD_HC_IN_IRQHandler+0x366>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335c      	adds	r3, #92	; 0x5c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	b2d8      	uxtb	r0, r3
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	335c      	adds	r3, #92	; 0x5c
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f006 f879 	bl	8009e84 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	3350      	adds	r3, #80	; 0x50
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2d8      	uxtb	r0, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3350      	adds	r3, #80	; 0x50
 8003dba:	4602      	mov	r2, r0
 8003dbc:	701a      	strb	r2, [r3, #0]
}
 8003dbe:	e1d2      	b.n	8004166 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	f040 80f2 	bne.w	8003fbc <HCD_HC_IN_IRQHandler+0x590>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	4619      	mov	r1, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	335d      	adds	r3, #93	; 0x5d
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10a      	bne.n	8003e26 <HCD_HC_IN_IRQHandler+0x3fa>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	335c      	adds	r3, #92	; 0x5c
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e0b0      	b.n	8003f88 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	335d      	adds	r3, #93	; 0x5d
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d10a      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x426>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	335c      	adds	r3, #92	; 0x5c
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e09a      	b.n	8003f88 <HCD_HC_IN_IRQHandler+0x55c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	335d      	adds	r3, #93	; 0x5d
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b06      	cmp	r3, #6
 8003e66:	d00a      	beq.n	8003e7e <HCD_HC_IN_IRQHandler+0x452>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	335d      	adds	r3, #93	; 0x5d
 8003e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d156      	bne.n	8003f2c <HCD_HC_IN_IRQHandler+0x500>
      hhcd->hc[ch_num].ErrCnt++;
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3358      	adds	r3, #88	; 0x58
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c59      	adds	r1, r3, #1
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4403      	add	r3, r0
 8003ea0:	3358      	adds	r3, #88	; 0x58
 8003ea2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3358      	adds	r3, #88	; 0x58
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d914      	bls.n	8003ee4 <HCD_HC_IN_IRQHandler+0x4b8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3358      	adds	r3, #88	; 0x58
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	335c      	adds	r3, #92	; 0x5c
 8003ede:	2204      	movs	r2, #4
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e009      	b.n	8003ef8 <HCD_HC_IN_IRQHandler+0x4cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	335c      	adds	r3, #92	; 0x5c
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e02d      	b.n	8003f88 <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	335d      	adds	r3, #93	; 0x5d
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d122      	bne.n	8003f88 <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	335c      	adds	r3, #92	; 0x5c
 8003f52:	2202      	movs	r2, #2
 8003f54:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f6c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f74:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	461a      	mov	r2, r3
 8003f96:	2302      	movs	r3, #2
 8003f98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	b2d8      	uxtb	r0, r3
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	335c      	adds	r3, #92	; 0x5c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f005 ff65 	bl	8009e84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fba:	e0d4      	b.n	8004166 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d13f      	bne.n	8004052 <HCD_HC_IN_IRQHandler+0x626>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	4619      	mov	r1, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	3358      	adds	r3, #88	; 0x58
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4403      	add	r3, r0
 8004016:	3358      	adds	r3, #88	; 0x58
 8004018:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	335d      	adds	r3, #93	; 0x5d
 800402a:	2206      	movs	r2, #6
 800402c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f004 fb61 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404a:	461a      	mov	r2, r3
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	6093      	str	r3, [r2, #8]
}
 8004050:	e089      	b.n	8004166 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d17e      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0x73a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	440b      	add	r3, r1
 8004076:	333f      	adds	r3, #63	; 0x3f
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d123      	bne.n	80040c6 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3358      	adds	r3, #88	; 0x58
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409e:	4619      	mov	r1, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f043 0302 	orr.w	r3, r3, #2
 80040b2:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f004 fb1e 	bl	8008700 <USB_HC_Halt>
 80040c4:	e046      	b.n	8004154 <HCD_HC_IN_IRQHandler+0x728>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	333f      	adds	r3, #63	; 0x3f
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HCD_HC_IN_IRQHandler+0x6c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	333f      	adds	r3, #63	; 0x3f
 80040ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d130      	bne.n	8004154 <HCD_HC_IN_IRQHandler+0x728>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	3358      	adds	r3, #88	; 0x58
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d122      	bne.n	8004154 <HCD_HC_IN_IRQHandler+0x728>
        hhcd->hc[ch_num].state = HC_NAK;
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	335d      	adds	r3, #93	; 0x5d
 800411e:	2203      	movs	r2, #3
 8004120:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	4619      	mov	r1, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f004 fad6 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	461a      	mov	r2, r3
 8004162:	2310      	movs	r3, #16
 8004164:	6093      	str	r3, [r2, #8]
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d11a      	bne.n	80041d4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	461a      	mov	r2, r3
 80041ac:	2304      	movs	r3, #4
 80041ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	4619      	mov	r1, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 80041d2:	e347      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d142      	bne.n	8004270 <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	461a      	mov	r2, r3
 80041f8:	2320      	movs	r3, #32
 80041fa:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	333d      	adds	r3, #61	; 0x3d
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 8328 	bne.w	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	333d      	adds	r3, #61	; 0x3d
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	335c      	adds	r3, #92	; 0x5c
 8004238:	2202      	movs	r2, #2
 800423a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	4619      	mov	r1, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f004 fa49 	bl	8008700 <USB_HC_Halt>
}
 800426e:	e2f9      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d140      	bne.n	8004308 <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	335d      	adds	r3, #93	; 0x5d
 8004296:	2204      	movs	r2, #4
 8004298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	333d      	adds	r3, #61	; 0x3d
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	3358      	adds	r3, #88	; 0x58
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	4619      	mov	r1, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 fa06 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	461a      	mov	r2, r3
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	6093      	str	r3, [r2, #8]
}
 8004306:	e2ad      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d123      	bne.n	8004368 <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	4619      	mov	r1, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f004 f9d7 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004364:	6093      	str	r3, [r2, #8]
}
 8004366:	e27d      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d136      	bne.n	80043ec <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	3358      	adds	r3, #88	; 0x58
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	4619      	mov	r1, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f004 f99e 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	461a      	mov	r2, r3
 80043d2:	2301      	movs	r3, #1
 80043d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	335d      	adds	r3, #93	; 0x5d
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
}
 80043ea:	e23b      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d12c      	bne.n	800445c <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2308      	movs	r3, #8
 8004412:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004420:	4619      	mov	r1, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f004 f95d 	bl	8008700 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	335d      	adds	r3, #93	; 0x5d
 8004456:	2205      	movs	r2, #5
 8004458:	701a      	strb	r2, [r3, #0]
}
 800445a:	e203      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d156      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	3358      	adds	r3, #88	; 0x58
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	440b      	add	r3, r1
 8004494:	335d      	adds	r3, #93	; 0x5d
 8004496:	2203      	movs	r2, #3
 8004498:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	333d      	adds	r3, #61	; 0x3d
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d114      	bne.n	80044da <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	333c      	adds	r3, #60	; 0x3c
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	440b      	add	r3, r1
 80044d4:	333d      	adds	r3, #61	; 0x3d
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	4619      	mov	r1, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f004 f8fa 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	461a      	mov	r2, r3
 800451a:	2310      	movs	r3, #16
 800451c:	6093      	str	r3, [r2, #8]
}
 800451e:	e1a1      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d12c      	bne.n	8004590 <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004542:	4619      	mov	r1, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f004 f8cc 	bl	8008700 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	335d      	adds	r3, #93	; 0x5d
 8004578:	2206      	movs	r2, #6
 800457a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	6093      	str	r3, [r2, #8]
}
 800458e:	e169      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d136      	bne.n	8004616 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	4619      	mov	r1, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 f893 	bl	8008700 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	461a      	mov	r2, r3
 80045e8:	2310      	movs	r3, #16
 80045ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	335d      	adds	r3, #93	; 0x5d
 8004610:	2208      	movs	r2, #8
 8004612:	701a      	strb	r2, [r3, #0]
}
 8004614:	e126      	b.n	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	f040 811b 	bne.w	8004864 <HCD_HC_OUT_IRQHandler+0x6f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	4619      	mov	r1, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f023 0302 	bic.w	r3, r3, #2
 800464e:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	335d      	adds	r3, #93	; 0x5d
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d137      	bne.n	80046d6 <HCD_HC_OUT_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	335c      	adds	r3, #92	; 0x5c
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	333f      	adds	r3, #63	; 0x3f
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d00b      	beq.n	80046a8 <HCD_HC_OUT_IRQHandler+0x53a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	333f      	adds	r3, #63	; 0x3f
 80046a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	f040 80c5 	bne.w	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	440b      	add	r3, r1
 80046b6:	3351      	adds	r3, #81	; 0x51
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2d8      	uxtb	r0, r3
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3351      	adds	r3, #81	; 0x51
 80046d0:	4602      	mov	r2, r0
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e0ad      	b.n	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	335d      	adds	r3, #93	; 0x5d
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d10a      	bne.n	8004702 <HCD_HC_OUT_IRQHandler+0x594>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	440b      	add	r3, r1
 80046fa:	335c      	adds	r3, #92	; 0x5c
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e097      	b.n	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	335d      	adds	r3, #93	; 0x5d
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d10a      	bne.n	800472e <HCD_HC_OUT_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	335c      	adds	r3, #92	; 0x5c
 8004728:	2202      	movs	r2, #2
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e081      	b.n	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	335d      	adds	r3, #93	; 0x5d
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10a      	bne.n	800475a <HCD_HC_OUT_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	335c      	adds	r3, #92	; 0x5c
 8004754:	2205      	movs	r2, #5
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e06b      	b.n	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	335d      	adds	r3, #93	; 0x5d
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b06      	cmp	r3, #6
 800476e:	d00a      	beq.n	8004786 <HCD_HC_OUT_IRQHandler+0x618>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	335d      	adds	r3, #93	; 0x5d
 8004780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004782:	2b08      	cmp	r3, #8
 8004784:	d155      	bne.n	8004832 <HCD_HC_OUT_IRQHandler+0x6c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	3358      	adds	r3, #88	; 0x58
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4403      	add	r3, r0
 80047a8:	3358      	adds	r3, #88	; 0x58
 80047aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	3358      	adds	r3, #88	; 0x58
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d914      	bls.n	80047ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	3358      	adds	r3, #88	; 0x58
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	335c      	adds	r3, #92	; 0x5c
 80047e6:	2204      	movs	r2, #4
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e009      	b.n	8004800 <HCD_HC_OUT_IRQHandler+0x692>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	2202      	movs	r2, #2
 80047fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004816:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800481e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	461a      	mov	r2, r3
 8004840:	2302      	movs	r3, #2
 8004842:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	b2d8      	uxtb	r0, r3
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	440b      	add	r3, r1
 8004856:	335c      	adds	r3, #92	; 0x5c
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	4601      	mov	r1, r0
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f005 fb10 	bl	8009e84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004864:	bf00      	nop
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	0c5b      	lsrs	r3, r3, #17
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d003      	beq.n	80048b0 <HCD_RXQLVL_IRQHandler+0x44>
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	f000 8082 	beq.w	80049b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048ae:	e083      	b.n	80049b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d07f      	beq.n	80049b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	440b      	add	r3, r1
 80048c4:	3344      	adds	r3, #68	; 0x44
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d074      	beq.n	80049b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	440b      	add	r3, r1
 80048de:	3344      	adds	r3, #68	; 0x44
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	b292      	uxth	r2, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	f003 fe38 	bl	800855c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	3344      	adds	r3, #68	; 0x44
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	18d1      	adds	r1, r2, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4403      	add	r3, r0
 8004910:	3344      	adds	r3, #68	; 0x44
 8004912:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	440b      	add	r3, r1
 8004922:	334c      	adds	r3, #76	; 0x4c
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	18d1      	adds	r1, r2, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4403      	add	r3, r0
 8004938:	334c      	adds	r3, #76	; 0x4c
 800493a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d031      	beq.n	80049b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004968:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004970:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	3350      	adds	r3, #80	; 0x50
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	f083 0301 	eor.w	r3, r3, #1
 800499a:	b2d8      	uxtb	r0, r3
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	440b      	add	r3, r1
 80049aa:	3350      	adds	r3, #80	; 0x50
 80049ac:	4602      	mov	r2, r0
 80049ae:	701a      	strb	r2, [r3, #0]
      break;
 80049b0:	e001      	b.n	80049b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80049b6:	bf00      	nop
  }
}
 80049b8:	bf00      	nop
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	1ff80000 	.word	0x1ff80000

080049c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d113      	bne.n	8004a24 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10a      	bne.n	8004a1c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6992      	ldr	r2, [r2, #24]
 8004a10:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004a14:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f005 fa18 	bl	8009e4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f043 0302 	orr.w	r3, r3, #2
 8004a22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d148      	bne.n	8004ac0 <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f043 0308 	orr.w	r3, r3, #8
 8004a34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d129      	bne.n	8004a94 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d113      	bne.n	8004a70 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a52:	d106      	bne.n	8004a62 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f003 fdc8 	bl	80085f0 <USB_InitFSLSPClkSel>
 8004a60:	e011      	b.n	8004a86 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f003 fdc1 	bl	80085f0 <USB_InitFSLSPClkSel>
 8004a6e:	e00a      	b.n	8004a86 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a84:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f005 fa0a 	bl	8009ea0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f005 f9dd 	bl	8009e4c <HAL_HCD_Connect_Callback>
 8004a92:	e015      	b.n	8004ac0 <HCD_Port_IRQHandler+0xfc>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f005 fa11 	bl	8009ebc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004aae:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	6992      	ldr	r2, [r2, #24]
 8004aba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004abe:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d103      	bne.n	8004ad2 <HCD_Port_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 0320 	orr.w	r3, r3, #32
 8004ad0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e10f      	b.n	8004d1a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f004 fb06 	bl	8009120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f001 ffb6 	bl	8006a9c <HAL_RCC_GetPCLK1Freq>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <HAL_I2C_Init+0x23c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d807      	bhi.n	8004b4c <HAL_I2C_Init+0x64>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a7a      	ldr	r2, [pc, #488]	; (8004d28 <HAL_I2C_Init+0x240>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e006      	b.n	8004b5a <HAL_I2C_Init+0x72>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a77      	ldr	r2, [pc, #476]	; (8004d2c <HAL_I2C_Init+0x244>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bf94      	ite	ls
 8004b54:	2301      	movls	r3, #1
 8004b56:	2300      	movhi	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0db      	b.n	8004d1a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <HAL_I2C_Init+0x248>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0c9b      	lsrs	r3, r3, #18
 8004b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6852      	ldr	r2, [r2, #4]
 8004b78:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4863      	ldr	r0, [pc, #396]	; (8004d24 <HAL_I2C_Init+0x23c>)
 8004b96:	4283      	cmp	r3, r0
 8004b98:	d802      	bhi.n	8004ba0 <HAL_I2C_Init+0xb8>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	e009      	b.n	8004bb4 <HAL_I2C_Init+0xcc>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004ba6:	fb00 f303 	mul.w	r3, r0, r3
 8004baa:	4862      	ldr	r0, [pc, #392]	; (8004d34 <HAL_I2C_Init+0x24c>)
 8004bac:	fba0 0303 	umull	r0, r3, r0, r3
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4955      	ldr	r1, [pc, #340]	; (8004d24 <HAL_I2C_Init+0x23c>)
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	d80d      	bhi.n	8004bf0 <HAL_I2C_Init+0x108>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e59      	subs	r1, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be2:	3301      	adds	r3, #1
 8004be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf38      	it	cc
 8004bec:	2304      	movcc	r3, #4
 8004bee:	e04f      	b.n	8004c90 <HAL_I2C_Init+0x1a8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <HAL_I2C_Init+0x134>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e5c      	subs	r4, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	440b      	add	r3, r1
 8004c06:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e012      	b.n	8004c42 <HAL_I2C_Init+0x15a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1e5c      	subs	r4, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	0099      	lsls	r1, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_Init+0x162>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e022      	b.n	8004c90 <HAL_I2C_Init+0x1a8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <HAL_I2C_Init+0x188>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1e5c      	subs	r4, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	440b      	add	r3, r1
 8004c60:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	e00f      	b.n	8004c90 <HAL_I2C_Init+0x1a8>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1e5c      	subs	r4, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	0099      	lsls	r1, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c86:	3301      	adds	r3, #1
 8004c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	69d0      	ldr	r0, [r2, #28]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6a12      	ldr	r2, [r2, #32]
 8004caa:	4302      	orrs	r2, r0
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6908      	ldr	r0, [r1, #16]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68c9      	ldr	r1, [r1, #12]
 8004cca:	4301      	orrs	r1, r0
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6950      	ldr	r0, [r2, #20]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6992      	ldr	r2, [r2, #24]
 8004ce6:	4302      	orrs	r2, r0
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	000186a0 	.word	0x000186a0
 8004d28:	001e847f 	.word	0x001e847f
 8004d2c:	003d08ff 	.word	0x003d08ff
 8004d30:	431bde83 	.word	0x431bde83
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e021      	b.n	8004d8e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2224      	movs	r2, #36	; 0x24
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f004 fa46 	bl	80091f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db2:	f7fd fba1 	bl	80024f8 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	f040 80d9 	bne.w	8004f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2319      	movs	r3, #25
 8004dcc:	2201      	movs	r2, #1
 8004dce:	496d      	ldr	r1, [pc, #436]	; (8004f84 <HAL_I2C_Mem_Write+0x1ec>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc67 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0cc      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Mem_Write+0x56>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0c5      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d007      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2221      	movs	r2, #33	; 0x21
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a4d      	ldr	r2, [pc, #308]	; (8004f88 <HAL_I2C_Mem_Write+0x1f0>)
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e56:	88f8      	ldrh	r0, [r7, #6]
 8004e58:	893a      	ldrh	r2, [r7, #8]
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4603      	mov	r3, r0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fac4 	bl	80053f4 <I2C_RequestMemoryWrite>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d052      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e081      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fce8 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d107      	bne.n	8004e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06b      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x180>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1aa      	bne.n	8004e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fcd4 	bl	80058d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d107      	bne.n	8004f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e016      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	00100002 	.word	0x00100002
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fa6:	f7fd faa7 	bl	80024f8 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	f040 8208 	bne.w	80053ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2319      	movs	r3, #25
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_I2C_Mem_Read+0x224>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb6d 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e1fb      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0x56>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e1f4      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d007      	beq.n	8005008 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2222      	movs	r2, #34	; 0x22
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <HAL_I2C_Mem_Read+0x228>)
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504a:	88f8      	ldrh	r0, [r7, #6]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4603      	mov	r3, r0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa52 	bl	8005504 <I2C_RequestMemoryRead>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e1b0      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d113      	bne.n	800509a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e184      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d11b      	bne.n	80050da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e164      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11b      	bne.n	800511a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	e144      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005130:	e138      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b03      	cmp	r3, #3
 8005138:	f200 80f1 	bhi.w	800531e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	2b01      	cmp	r3, #1
 8005142:	d123      	bne.n	800518c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fc03 	bl	8005954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e139      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	6912      	ldr	r2, [r2, #16]
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800518a:	e10b      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b02      	cmp	r3, #2
 8005192:	d14e      	bne.n	8005232 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	2200      	movs	r2, #0
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <HAL_I2C_Mem_Read+0x22c>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa80 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e10e      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 80051ae:	bf00      	nop
 80051b0:	00100002 	.word	0x00100002
 80051b4:	ffff0000 	.word	0xffff0000
 80051b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	6912      	ldr	r2, [r2, #16]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	6912      	ldr	r2, [r2, #16]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e0b8      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2200      	movs	r2, #0
 800523a:	4966      	ldr	r1, [pc, #408]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fa31 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0bf      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	6912      	ldr	r2, [r2, #16]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2200      	movs	r2, #0
 8005296:	494f      	ldr	r1, [pc, #316]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa03 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e091      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	6912      	ldr	r2, [r2, #16]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6912      	ldr	r2, [r2, #16]
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800531c:	e042      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb16 	bl	8005954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e04c      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	6912      	ldr	r2, [r2, #16]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d118      	bne.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	6912      	ldr	r2, [r2, #16]
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f aec2 	bne.w	8005132 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010004 	.word	0x00010004

080053d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	817b      	strh	r3, [r7, #10]
 8005406:	460b      	mov	r3, r1
 8005408:	813b      	strh	r3, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2200      	movs	r2, #0
 8005426:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f93a 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e05e      	b.n	80054f8 <I2C_RequestMemoryWrite+0x104>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	897a      	ldrh	r2, [r7, #10]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	492c      	ldr	r1, [pc, #176]	; (8005500 <I2C_RequestMemoryWrite+0x10c>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f97f 	bl	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_RequestMemoryWrite+0x6a>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e04c      	b.n	80054f8 <I2C_RequestMemoryWrite+0x104>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	6a39      	ldr	r1, [r7, #32]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f9e9 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <I2C_RequestMemoryWrite+0xac>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	2b04      	cmp	r3, #4
 800548a:	d107      	bne.n	800549c <I2C_RequestMemoryWrite+0xa8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e02b      	b.n	80054f8 <I2C_RequestMemoryWrite+0x104>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <I2C_RequestMemoryWrite+0xbe>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	893a      	ldrh	r2, [r7, #8]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	611a      	str	r2, [r3, #16]
 80054b0:	e021      	b.n	80054f6 <I2C_RequestMemoryWrite+0x102>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	893a      	ldrh	r2, [r7, #8]
 80054b8:	0a12      	lsrs	r2, r2, #8
 80054ba:	b292      	uxth	r2, r2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	6a39      	ldr	r1, [r7, #32]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9c3 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <I2C_RequestMemoryWrite+0xf8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d107      	bne.n	80054e8 <I2C_RequestMemoryWrite+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e005      	b.n	80054f8 <I2C_RequestMemoryWrite+0x104>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	893a      	ldrh	r2, [r7, #8]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	00010002 	.word	0x00010002

08005504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	461a      	mov	r2, r3
 8005512:	4603      	mov	r3, r0
 8005514:	817b      	strh	r3, [r7, #10]
 8005516:	460b      	mov	r3, r1
 8005518:	813b      	strh	r3, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800552c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	2200      	movs	r2, #0
 8005546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8aa 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e09d      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	897a      	ldrh	r2, [r7, #10]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005566:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	494c      	ldr	r1, [pc, #304]	; (80056a0 <I2C_RequestMemoryRead+0x19c>)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f8ef 	bl	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_RequestMemoryRead+0x7a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e08b      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005596:	6a39      	ldr	r1, [r7, #32]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f959 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <I2C_RequestMemoryRead+0xbc>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d107      	bne.n	80055bc <I2C_RequestMemoryRead+0xb8>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e06a      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d105      	bne.n	80055d2 <I2C_RequestMemoryRead+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	893a      	ldrh	r2, [r7, #8]
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	611a      	str	r2, [r3, #16]
 80055d0:	e021      	b.n	8005616 <I2C_RequestMemoryRead+0x112>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	893a      	ldrh	r2, [r7, #8]
 80055d8:	0a12      	lsrs	r2, r2, #8
 80055da:	b292      	uxth	r2, r2
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	6a39      	ldr	r1, [r7, #32]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f933 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <I2C_RequestMemoryRead+0x108>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d107      	bne.n	8005608 <I2C_RequestMemoryRead+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e044      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	893a      	ldrh	r2, [r7, #8]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f918 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <I2C_RequestMemoryRead+0x13e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b04      	cmp	r3, #4
 800562c:	d107      	bne.n	800563e <I2C_RequestMemoryRead+0x13a>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e029      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f820 	bl	80056a4 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_RequestMemoryRead+0x16a>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e013      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	897a      	ldrh	r2, [r7, #10]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	4907      	ldr	r1, [pc, #28]	; (80056a0 <I2C_RequestMemoryRead+0x19c>)
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f864 	bl	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <I2C_RequestMemoryRead+0x190>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <I2C_RequestMemoryRead+0x192>
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	00010002 	.word	0x00010002

080056a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b4:	e025      	b.n	8005702 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056bc:	d021      	beq.n	8005702 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fc ff1b 	bl	80024f8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d802      	bhi.n	80056d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e023      	b.n	800574a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10d      	bne.n	8005728 <I2C_WaitOnFlagUntilTimeout+0x84>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	e00c      	b.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d0b6      	beq.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005760:	e051      	b.n	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d123      	bne.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005780:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800578a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0204 	orr.w	r2, r3, #4
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e046      	b.n	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c0:	d021      	beq.n	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fc fe99 	bl	80024f8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d802      	bhi.n	80057d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d116      	bne.n	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e020      	b.n	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10c      	bne.n	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	43da      	mvns	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf14      	ite	ne
 8005822:	2301      	movne	r3, #1
 8005824:	2300      	moveq	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e00b      	b.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	43da      	mvns	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d18d      	bne.n	8005762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585c:	e02d      	b.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f8ce 	bl	8005a00 <I2C_IsAcknowledgeFailed>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e02d      	b.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005874:	d021      	beq.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fc fe3f 	bl	80024f8 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d802      	bhi.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e007      	b.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	2b80      	cmp	r3, #128	; 0x80
 80058c6:	d1ca      	bne.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058de:	e02d      	b.n	800593c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f88d 	bl	8005a00 <I2C_IsAcknowledgeFailed>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e02d      	b.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f6:	d021      	beq.n	800593c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fc fdfe 	bl	80024f8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d802      	bhi.n	800590e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e007      	b.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d1ca      	bne.n	80058e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005960:	e042      	b.n	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d119      	bne.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e029      	b.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a4:	f7fc fda8 	bl	80024f8 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d802      	bhi.n	80059ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d116      	bne.n	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e007      	b.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d1b5      	bne.n	8005962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a16:	d11b      	bne.n	8005a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f043 0204 	orr.w	r2, r3, #4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d129      	bne.n	8005ac8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2224      	movs	r2, #36	; 0x24
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a96:	f022 0210 	bic.w	r2, r2, #16
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d12a      	bne.n	8005b46 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	; 0x24
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005b10:	89fb      	ldrh	r3, [r7, #14]
 8005b12:	f023 030f 	bic.w	r3, r3, #15
 8005b16:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	89fb      	ldrh	r3, [r7, #14]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	89fa      	ldrh	r2, [r7, #14]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0bf      	b.n	8005ce6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 fbe0 	bl	8009340 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	6992      	ldr	r2, [r2, #24]
 8005b92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	6991      	ldr	r1, [r2, #24]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6850      	ldr	r0, [r2, #4]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6892      	ldr	r2, [r2, #8]
 8005baa:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bb0:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6912      	ldr	r2, [r2, #16]
 8005bb6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6899      	ldr	r1, [r3, #8]
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <HAL_LTDC_Init+0x19c>)
 8005bc8:	400b      	ands	r3, r1
 8005bca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	041b      	lsls	r3, r3, #16
 8005bd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	6891      	ldr	r1, [r2, #8]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6990      	ldr	r0, [r2, #24]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4302      	orrs	r2, r0
 8005be6:	430a      	orrs	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68d9      	ldr	r1, [r3, #12]
 8005bf4:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <HAL_LTDC_Init+0x19c>)
 8005bf6:	400b      	ands	r3, r1
 8005bf8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	68d1      	ldr	r1, [r2, #12]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6a10      	ldr	r0, [r2, #32]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4302      	orrs	r2, r0
 8005c14:	430a      	orrs	r2, r1
 8005c16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6919      	ldr	r1, [r3, #16]
 8005c22:	4b33      	ldr	r3, [pc, #204]	; (8005cf0 <HAL_LTDC_Init+0x19c>)
 8005c24:	400b      	ands	r3, r1
 8005c26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	6911      	ldr	r1, [r2, #16]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4302      	orrs	r2, r0
 8005c42:	430a      	orrs	r2, r1
 8005c44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6959      	ldr	r1, [r3, #20]
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <HAL_LTDC_Init+0x19c>)
 8005c52:	400b      	ands	r3, r1
 8005c54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	6951      	ldr	r1, [r2, #20]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	430a      	orrs	r2, r1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ca2:	68b8      	ldr	r0, [r7, #8]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4302      	orrs	r2, r0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005cae:	4302      	orrs	r2, r0
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cbe:	f042 0206 	orr.w	r2, r2, #6
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	6992      	ldr	r2, [r2, #24]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	f000f800 	.word	0xf000f800

08005cf4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <HAL_LTDC_IRQHandler+0x6a>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01e      	beq.n	8005d5e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d2a:	f022 0204 	bic.w	r2, r2, #4
 8005d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2204      	movs	r2, #4
 8005d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d3e:	f043 0201 	orr.w	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f86f 	bl	8005e3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d023      	beq.n	8005db0 <HAL_LTDC_IRQHandler+0xbc>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01e      	beq.n	8005db0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d7c:	f022 0202 	bic.w	r2, r2, #2
 8005d80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2202      	movs	r2, #2
 8005d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d90:	f043 0202 	orr.w	r2, r3, #2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f846 	bl	8005e3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01b      	beq.n	8005df2 <HAL_LTDC_IRQHandler+0xfe>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d016      	beq.n	8005df2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f82f 	bl	8005e50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01b      	beq.n	8005e34 <HAL_LTDC_IRQHandler+0x140>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e10:	f022 0208 	bic.w	r2, r2, #8
 8005e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f818 	bl	8005e64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e78:	b5b0      	push	{r4, r5, r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_LTDC_ConfigLayer+0x1a>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e02c      	b.n	8005eec <HAL_LTDC_ConfigLayer+0x74>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2134      	movs	r1, #52	; 0x34
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f83b 	bl	8005f48 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bdb0      	pop	{r4, r5, r7, pc}

08005ef4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_LTDC_EnableDither+0x16>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e016      	b.n	8005f38 <HAL_LTDC_EnableDither+0x44>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <HAL_LTDC_EnableDither+0x50>)
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_LTDC_EnableDither+0x50>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40016800 	.word	0x40016800

08005f48 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f64:	4413      	add	r3, r2
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	01db      	lsls	r3, r3, #7
 8005f74:	4413      	add	r3, r2
 8005f76:	3384      	adds	r3, #132	; 0x84
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	440b      	add	r3, r1
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f8e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3384      	adds	r3, #132	; 0x84
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb0:	4413      	add	r3, r2
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc8:	4413      	add	r3, r2
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	4413      	add	r3, r2
 8005fda:	3384      	adds	r3, #132	; 0x84
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	440b      	add	r3, r1
 8005fea:	3384      	adds	r3, #132	; 0x84
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ff2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	01db      	lsls	r3, r3, #7
 8005ffe:	4413      	add	r3, r2
 8006000:	3384      	adds	r3, #132	; 0x84
 8006002:	4619      	mov	r1, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006012:	4413      	add	r3, r2
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	; 0x84
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	01db      	lsls	r3, r3, #7
 8006036:	440b      	add	r3, r1
 8006038:	3384      	adds	r3, #132	; 0x84
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f023 0307 	bic.w	r3, r3, #7
 8006040:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	01db      	lsls	r3, r3, #7
 800604c:	4413      	add	r3, r2
 800604e:	3384      	adds	r3, #132	; 0x84
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	061b      	lsls	r3, r3, #24
 8006072:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	01db      	lsls	r3, r3, #7
 800607e:	4413      	add	r3, r2
 8006080:	3384      	adds	r3, #132	; 0x84
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	01db      	lsls	r3, r3, #7
 800608e:	4413      	add	r3, r2
 8006090:	3384      	adds	r3, #132	; 0x84
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4413      	add	r3, r2
 80060a4:	3384      	adds	r3, #132	; 0x84
 80060a6:	4619      	mov	r1, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ae:	461a      	mov	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4413      	add	r3, r2
 80060ca:	3384      	adds	r3, #132	; 0x84
 80060cc:	461a      	mov	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	01db      	lsls	r3, r3, #7
 80060d8:	440b      	add	r3, r1
 80060da:	3384      	adds	r3, #132	; 0x84
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	01db      	lsls	r3, r3, #7
 80060ee:	4413      	add	r3, r2
 80060f0:	3384      	adds	r3, #132	; 0x84
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	01db      	lsls	r3, r3, #7
 8006104:	4413      	add	r3, r2
 8006106:	3384      	adds	r3, #132	; 0x84
 8006108:	461a      	mov	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	440b      	add	r3, r1
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	01db      	lsls	r3, r3, #7
 800612e:	4413      	add	r3, r2
 8006130:	3384      	adds	r3, #132	; 0x84
 8006132:	4619      	mov	r1, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	4313      	orrs	r3, r2
 800613e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	01db      	lsls	r3, r3, #7
 800614a:	4413      	add	r3, r2
 800614c:	3384      	adds	r3, #132	; 0x84
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	01db      	lsls	r3, r3, #7
 800615a:	4413      	add	r3, r2
 800615c:	3384      	adds	r3, #132	; 0x84
 800615e:	461a      	mov	r2, r3
 8006160:	2300      	movs	r3, #0
 8006162:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	01db      	lsls	r3, r3, #7
 800616e:	4413      	add	r3, r2
 8006170:	3384      	adds	r3, #132	; 0x84
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8006182:	2304      	movs	r3, #4
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	e01b      	b.n	80061c0 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d102      	bne.n	8006196 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8006190:	2303      	movs	r3, #3
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e014      	b.n	80061c0 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b04      	cmp	r3, #4
 800619c:	d00b      	beq.n	80061b6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d007      	beq.n	80061b6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d003      	beq.n	80061b6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	d102      	bne.n	80061bc <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 80061b6:	2302      	movs	r3, #2
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e001      	b.n	80061c0 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	01db      	lsls	r3, r3, #7
 80061ca:	4413      	add	r3, r2
 80061cc:	3384      	adds	r3, #132	; 0x84
 80061ce:	461a      	mov	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4619      	mov	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	440b      	add	r3, r1
 80061dc:	3384      	adds	r3, #132	; 0x84
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	01db      	lsls	r3, r3, #7
 80061f0:	4413      	add	r3, r2
 80061f2:	3384      	adds	r3, #132	; 0x84
 80061f4:	4618      	mov	r0, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	041a      	lsls	r2, r3, #16
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1acb      	subs	r3, r1, r3
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	3303      	adds	r3, #3
 8006214:	4313      	orrs	r3, r2
 8006216:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	3384      	adds	r3, #132	; 0x84
 8006226:	461a      	mov	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	01db      	lsls	r3, r3, #7
 8006232:	440b      	add	r3, r1
 8006234:	3384      	adds	r3, #132	; 0x84
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4413      	add	r3, r2
 800624e:	3384      	adds	r3, #132	; 0x84
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	01db      	lsls	r3, r3, #7
 8006262:	4413      	add	r3, r2
 8006264:	3384      	adds	r3, #132	; 0x84
 8006266:	461a      	mov	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	01db      	lsls	r3, r3, #7
 8006272:	440b      	add	r3, r1
 8006274:	3384      	adds	r3, #132	; 0x84
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6013      	str	r3, [r2, #0]
}
 800627e:	bf00      	nop
 8006280:	3724      	adds	r7, #36	; 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e22d      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d075      	beq.n	8006396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062aa:	4ba3      	ldr	r3, [pc, #652]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d00c      	beq.n	80062d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4ba0      	ldr	r3, [pc, #640]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d112      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b9d      	ldr	r3, [pc, #628]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	4b99      	ldr	r3, [pc, #612]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05b      	beq.n	8006394 <HAL_RCC_OscConfig+0x108>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d157      	bne.n	8006394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e208      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x74>
 80062f2:	4a91      	ldr	r2, [pc, #580]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	4b90      	ldr	r3, [pc, #576]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0x98>
 800630a:	4a8b      	ldr	r2, [pc, #556]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800630c:	4b8a      	ldr	r3, [pc, #552]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4a88      	ldr	r2, [pc, #544]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	4b87      	ldr	r3, [pc, #540]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006324:	4a84      	ldr	r2, [pc, #528]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006326:	4b84      	ldr	r3, [pc, #528]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4a81      	ldr	r2, [pc, #516]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006332:	4b81      	ldr	r3, [pc, #516]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fc f8d8 	bl	80024f8 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fc f8d4 	bl	80024f8 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e1cd      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xc0>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fc f8c4 	bl	80024f8 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fc f8c0 	bl	80024f8 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1b9      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	4b6c      	ldr	r3, [pc, #432]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0xe8>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b62      	ldr	r3, [pc, #392]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d11c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b5f      	ldr	r3, [pc, #380]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c6:	4b5c      	ldr	r3, [pc, #368]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e18d      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	4956      	ldr	r1, [pc, #344]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	4b55      	ldr	r3, [pc, #340]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	e03a      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b4f      	ldr	r3, [pc, #316]	; (800653c <HAL_RCC_OscConfig+0x2b0>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fc f879 	bl	80024f8 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640a:	f7fc f875 	bl	80024f8 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e16e      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	4b46      	ldr	r3, [pc, #280]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4943      	ldr	r1, [pc, #268]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <HAL_RCC_OscConfig+0x2b0>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fc f858 	bl	80024f8 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644c:	f7fc f854 	bl	80024f8 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e14d      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d030      	beq.n	80064d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800647e:	4b30      	ldr	r3, [pc, #192]	; (8006540 <HAL_RCC_OscConfig+0x2b4>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fc f838 	bl	80024f8 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648c:	f7fc f834 	bl	80024f8 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e12d      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b26      	ldr	r3, [pc, #152]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x200>
 80064aa:	e015      	b.n	80064d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ac:	4b24      	ldr	r3, [pc, #144]	; (8006540 <HAL_RCC_OscConfig+0x2b4>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fc f821 	bl	80024f8 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ba:	f7fc f81d 	bl	80024f8 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e116      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80064ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a0 	beq.w	8006626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ea:	4b13      	ldr	r3, [pc, #76]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	4a0f      	ldr	r2, [pc, #60]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006504:	6413      	str	r3, [r2, #64]	; 0x40
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_RCC_OscConfig+0x2b8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d121      	bne.n	8006566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <HAL_RCC_OscConfig+0x2b8>)
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_RCC_OscConfig+0x2b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652e:	f7fb ffe3 	bl	80024f8 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	e011      	b.n	800655a <HAL_RCC_OscConfig+0x2ce>
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	42470000 	.word	0x42470000
 8006540:	42470e80 	.word	0x42470e80
 8006544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006548:	f7fb ffd6 	bl	80024f8 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e0cf      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b6a      	ldr	r3, [pc, #424]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d106      	bne.n	800657c <HAL_RCC_OscConfig+0x2f0>
 800656e:	4a66      	ldr	r2, [pc, #408]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006570:	4b65      	ldr	r3, [pc, #404]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	e01c      	b.n	80065b6 <HAL_RCC_OscConfig+0x32a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b05      	cmp	r3, #5
 8006582:	d10c      	bne.n	800659e <HAL_RCC_OscConfig+0x312>
 8006584:	4a60      	ldr	r2, [pc, #384]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006586:	4b60      	ldr	r3, [pc, #384]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	f043 0304 	orr.w	r3, r3, #4
 800658e:	6713      	str	r3, [r2, #112]	; 0x70
 8006590:	4a5d      	ldr	r2, [pc, #372]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006592:	4b5d      	ldr	r3, [pc, #372]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
 800659c:	e00b      	b.n	80065b6 <HAL_RCC_OscConfig+0x32a>
 800659e:	4a5a      	ldr	r2, [pc, #360]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80065a0:	4b59      	ldr	r3, [pc, #356]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
 80065aa:	4a57      	ldr	r2, [pc, #348]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80065ac:	4b56      	ldr	r3, [pc, #344]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b0:	f023 0304 	bic.w	r3, r3, #4
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d015      	beq.n	80065ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065be:	f7fb ff9b 	bl	80024f8 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c4:	e00a      	b.n	80065dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fb ff97 	bl	80024f8 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e08e      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065dc:	4b4a      	ldr	r3, [pc, #296]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ee      	beq.n	80065c6 <HAL_RCC_OscConfig+0x33a>
 80065e8:	e014      	b.n	8006614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ea:	f7fb ff85 	bl	80024f8 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fb ff81 	bl	80024f8 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e078      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006608:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ee      	bne.n	80065f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d105      	bne.n	8006626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800661a:	4a3b      	ldr	r2, [pc, #236]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d064      	beq.n	80066f8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800662e:	4b36      	ldr	r3, [pc, #216]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b08      	cmp	r3, #8
 8006638:	d05c      	beq.n	80066f4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d141      	bne.n	80066c6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006642:	4b32      	ldr	r3, [pc, #200]	; (800670c <HAL_RCC_OscConfig+0x480>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006648:	f7fb ff56 	bl	80024f8 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006650:	f7fb ff52 	bl	80024f8 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e04b      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800666e:	4926      	ldr	r1, [pc, #152]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	019b      	lsls	r3, r3, #6
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	4313      	orrs	r3, r2
 8006696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <HAL_RCC_OscConfig+0x480>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669e:	f7fb ff2b 	bl	80024f8 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a6:	f7fb ff27 	bl	80024f8 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e020      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x41a>
 80066c4:	e018      	b.n	80066f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <HAL_RCC_OscConfig+0x480>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fb ff14 	bl	80024f8 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fb ff10 	bl	80024f8 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e009      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e6:	4b08      	ldr	r3, [pc, #32]	; (8006708 <HAL_RCC_OscConfig+0x47c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x448>
 80066f2:	e001      	b.n	80066f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40007000 	.word	0x40007000
 8006708:	40023800 	.word	0x40023800
 800670c:	42470060 	.word	0x42470060

08006710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0ca      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006724:	4b67      	ldr	r3, [pc, #412]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d20c      	bcs.n	800674c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006732:	4b64      	ldr	r3, [pc, #400]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800673a:	4b62      	ldr	r3, [pc, #392]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0b6      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d020      	beq.n	800679a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006764:	4a58      	ldr	r2, [pc, #352]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006766:	4b58      	ldr	r3, [pc, #352]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800676e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800677c:	4a52      	ldr	r2, [pc, #328]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 800677e:	4b52      	ldr	r3, [pc, #328]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006788:	494f      	ldr	r1, [pc, #316]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 800678a:	4b4f      	ldr	r3, [pc, #316]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d044      	beq.n	8006830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ae:	4b46      	ldr	r3, [pc, #280]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d119      	bne.n	80067ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e07d      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d003      	beq.n	80067ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d107      	bne.n	80067de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ce:	4b3e      	ldr	r3, [pc, #248]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e06d      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067de:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e065      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ee:	4936      	ldr	r1, [pc, #216]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	4b35      	ldr	r3, [pc, #212]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f023 0203 	bic.w	r2, r3, #3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006800:	f7fb fe7a 	bl	80024f8 <HAL_GetTick>
 8006804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	e00a      	b.n	800681e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006808:	f7fb fe76 	bl	80024f8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	; 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e04d      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681e:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 020c 	and.w	r2, r3, #12
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	429a      	cmp	r2, r3
 800682e:	d1eb      	bne.n	8006808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006830:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 020f 	and.w	r2, r3, #15
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d90c      	bls.n	8006858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683e:	4b21      	ldr	r3, [pc, #132]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006846:	4b1f      	ldr	r3, [pc, #124]	; (80068c4 <HAL_RCC_ClockConfig+0x1b4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e030      	b.n	80068ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006864:	4918      	ldr	r1, [pc, #96]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006882:	4911      	ldr	r1, [pc, #68]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4313      	orrs	r3, r2
 8006894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006896:	f000 f81d 	bl	80068d4 <HAL_RCC_GetSysClockFreq>
 800689a:	4601      	mov	r1, r0
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_RCC_ClockConfig+0x1b8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	091b      	lsrs	r3, r3, #4
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	5cd3      	ldrb	r3, [r2, r3]
 80068aa:	fa21 f303 	lsr.w	r3, r1, r3
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <HAL_RCC_ClockConfig+0x1c0>)
 80068b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80068b2:	2000      	movs	r0, #0
 80068b4:	f003 f958 	bl	8009b68 <HAL_InitTick>

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023c00 	.word	0x40023c00
 80068c8:	40023800 	.word	0x40023800
 80068cc:	0800c738 	.word	0x0800c738
 80068d0:	2000007c 	.word	0x2000007c

080068d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	b08f      	sub	sp, #60	; 0x3c
 80068da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
 80068e4:	2300      	movs	r3, #0
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ec:	4b62      	ldr	r3, [pc, #392]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d007      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x34>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d008      	beq.n	800690e <HAL_RCC_GetSysClockFreq+0x3a>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 80b2 	bne.w	8006a66 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006902:	4b5e      	ldr	r3, [pc, #376]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8006906:	e0b1      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006908:	4b5d      	ldr	r3, [pc, #372]	; (8006a80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800690c:	e0ae      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800690e:	4b5a      	ldr	r3, [pc, #360]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006918:	4b57      	ldr	r3, [pc, #348]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d04e      	beq.n	80069c2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006924:	4b54      	ldr	r3, [pc, #336]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	f04f 0400 	mov.w	r4, #0
 800692e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	ea01 0103 	and.w	r1, r1, r3
 800693a:	ea02 0204 	and.w	r2, r2, r4
 800693e:	460b      	mov	r3, r1
 8006940:	4614      	mov	r4, r2
 8006942:	0160      	lsls	r0, r4, #5
 8006944:	6278      	str	r0, [r7, #36]	; 0x24
 8006946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006948:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800694c:	6278      	str	r0, [r7, #36]	; 0x24
 800694e:	015b      	lsls	r3, r3, #5
 8006950:	623b      	str	r3, [r7, #32]
 8006952:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006956:	1a5b      	subs	r3, r3, r1
 8006958:	eb64 0402 	sbc.w	r4, r4, r2
 800695c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8006960:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8006964:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8006968:	ebb8 0803 	subs.w	r8, r8, r3
 800696c:	eb69 0904 	sbc.w	r9, r9, r4
 8006970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8006988:	eb18 0801 	adds.w	r8, r8, r1
 800698c:	eb49 0902 	adc.w	r9, r9, r2
 8006990:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	f04f 0400 	mov.w	r4, #0
 80069b2:	461a      	mov	r2, r3
 80069b4:	4623      	mov	r3, r4
 80069b6:	f7f9 fc19 	bl	80001ec <__aeabi_uldivmod>
 80069ba:	4603      	mov	r3, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
 80069c0:	e043      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	f04f 0400 	mov.w	r4, #0
 80069cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	ea01 0103 	and.w	r1, r1, r3
 80069d8:	ea02 0204 	and.w	r2, r2, r4
 80069dc:	460b      	mov	r3, r1
 80069de:	4614      	mov	r4, r2
 80069e0:	0160      	lsls	r0, r4, #5
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	015b      	lsls	r3, r3, #5
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80069f4:	1a5b      	subs	r3, r3, r1
 80069f6:	eb64 0402 	sbc.w	r4, r4, r2
 80069fa:	01a6      	lsls	r6, r4, #6
 80069fc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8006a00:	019d      	lsls	r5, r3, #6
 8006a02:	1aed      	subs	r5, r5, r3
 8006a04:	eb66 0604 	sbc.w	r6, r6, r4
 8006a08:	00f3      	lsls	r3, r6, #3
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	00eb      	lsls	r3, r5, #3
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	e897 0060 	ldmia.w	r7, {r5, r6}
 8006a1c:	186d      	adds	r5, r5, r1
 8006a1e:	eb46 0602 	adc.w	r6, r6, r2
 8006a22:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8006a26:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8006a2a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8006a2e:	4655      	mov	r5, sl
 8006a30:	465e      	mov	r6, fp
 8006a32:	4628      	mov	r0, r5
 8006a34:	4631      	mov	r1, r6
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	f04f 0400 	mov.w	r4, #0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	f7f9 fbd4 	bl	80001ec <__aeabi_uldivmod>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	3301      	adds	r3, #1
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8006a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a64:	e002      	b.n	8006a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	373c      	adds	r7, #60	; 0x3c
 8006a72:	46bd      	mov	sp, r7
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	00f42400 	.word	0x00f42400
 8006a80:	007a1200 	.word	0x007a1200

08006a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	2000007c 	.word	0x2000007c

08006a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006aa0:	f7ff fff0 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	0a9b      	lsrs	r3, r3, #10
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4a03      	ldr	r2, [pc, #12]	; (8006ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab2:	5cd3      	ldrb	r3, [r2, r3]
 8006ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	0800c748 	.word	0x0800c748

08006ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	220f      	movs	r2, #15
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ad4:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_RCC_GetClockConfig+0x5c>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0203 	and.w	r2, r3, #3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <HAL_RCC_GetClockConfig+0x5c>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <HAL_RCC_GetClockConfig+0x5c>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <HAL_RCC_GetClockConfig+0x5c>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <HAL_RCC_GetClockConfig+0x60>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 020f 	and.w	r2, r3, #15
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40023800 	.word	0x40023800
 8006b24:	40023c00 	.word	0x40023c00

08006b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d061      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b50:	4ba3      	ldr	r3, [pc, #652]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b56:	f7fb fccf 	bl	80024f8 <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b5e:	f7fb fccb 	bl	80024f8 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e177      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b70:	4b9c      	ldr	r3, [pc, #624]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f0      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b88:	4996      	ldr	r1, [pc, #600]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	019a      	lsls	r2, r3, #6
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	071b      	lsls	r3, r3, #28
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01f      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ba8:	4b8e      	ldr	r3, [pc, #568]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bae:	0f1b      	lsrs	r3, r3, #28
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006bb6:	498b      	ldr	r1, [pc, #556]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	019a      	lsls	r2, r3, #6
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	071b      	lsls	r3, r3, #28
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bd0:	4984      	ldr	r1, [pc, #528]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bd2:	4b84      	ldr	r3, [pc, #528]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd8:	f023 021f 	bic.w	r2, r3, #31
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006be8:	4b7d      	ldr	r3, [pc, #500]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bee:	f7fb fc83 	bl	80024f8 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bf6:	f7fb fc7f 	bl	80024f8 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e12b      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c08:	4b76      	ldr	r3, [pc, #472]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d079      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c2c:	4b6e      	ldr	r3, [pc, #440]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c32:	f7fb fc61 	bl	80024f8 <HAL_GetTick>
 8006c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c38:	e008      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c3a:	f7fb fc5d 	bl	80024f8 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e109      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c4c:	4b65      	ldr	r3, [pc, #404]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c58:	d0ef      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d020      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c66:	4b5f      	ldr	r3, [pc, #380]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	0f1b      	lsrs	r3, r3, #28
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c74:	495b      	ldr	r1, [pc, #364]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	019a      	lsls	r2, r3, #6
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	061b      	lsls	r3, r3, #24
 8006c82:	431a      	orrs	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	071b      	lsls	r3, r3, #28
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c8e:	4955      	ldr	r1, [pc, #340]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c90:	4b54      	ldr	r3, [pc, #336]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01e      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	0e1b      	lsrs	r3, r3, #24
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cc2:	4948      	ldr	r1, [pc, #288]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	019a      	lsls	r2, r3, #6
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	071b      	lsls	r3, r3, #28
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cdc:	4941      	ldr	r1, [pc, #260]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006cde:	4b41      	ldr	r3, [pc, #260]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cf8:	f7fb fbfe 	bl	80024f8 <HAL_GetTick>
 8006cfc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d00:	f7fb fbfa 	bl	80024f8 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e0a6      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d12:	4b34      	ldr	r3, [pc, #208]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1e:	d1ef      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 808d 	beq.w	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	4a2c      	ldr	r2, [pc, #176]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d4a:	4a28      	ldr	r2, [pc, #160]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d4c:	4b27      	ldr	r3, [pc, #156]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d56:	f7fb fbcf 	bl	80024f8 <HAL_GetTick>
 8006d5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7fb fbcb 	bl	80024f8 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e077      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d70:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d7c:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d039      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d032      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006daa:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006db0:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006db6:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11e      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dc2:	f7fb fb99 	bl	80024f8 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc8:	e014      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dca:	f7fb fb95 	bl	80024f8 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d90b      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e03f      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006de0:	42470068 	.word	0x42470068
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470070 	.word	0x42470070
 8006dec:	40007000 	.word	0x40007000
 8006df0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0e4      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x302>
 8006e0e:	4916      	ldr	r1, [pc, #88]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e10:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e24:	4313      	orrs	r3, r2
 8006e26:	608b      	str	r3, [r1, #8]
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8006e2a:	4a0f      	ldr	r2, [pc, #60]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e34:	6093      	str	r3, [r2, #8]
 8006e36:	490c      	ldr	r1, [pc, #48]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e44:	4313      	orrs	r3, r2
 8006e46:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e54:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e5c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	424711e0 	.word	0x424711e0

08006e70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e025      	b.n	8006ed0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 ffe7 	bl	8008e6c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f001 f9a8 	bl	8008206 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	f001 fa13 	bl	80082ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d101      	bne.n	8006ef4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e018      	b.n	8006f26 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fa70 	bl	80083ea <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d104      	bne.n	8006f1c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2205      	movs	r2, #5
 8006f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006f1a:	e003      	b.n	8006f24 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d101      	bne.n	8006f48 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
 8006f46:	e00e      	b.n	8006f66 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fa83 	bl	8008462 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e055      	b.n	800702c <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f002 fd56 	bl	8009a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6851      	ldr	r1, [r2, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6892      	ldr	r2, [r2, #8]
 8006fc4:	4311      	orrs	r1, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68d2      	ldr	r2, [r2, #12]
 8006fca:	4311      	orrs	r1, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6912      	ldr	r2, [r2, #16]
 8006fd0:	4311      	orrs	r1, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6952      	ldr	r2, [r2, #20]
 8006fd6:	4311      	orrs	r1, r2
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6992      	ldr	r2, [r2, #24]
 8006fdc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	69d2      	ldr	r2, [r2, #28]
 8006fe6:	4311      	orrs	r1, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6a12      	ldr	r2, [r2, #32]
 8006fec:	4311      	orrs	r1, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6992      	ldr	r2, [r2, #24]
 8006ffe:	0c12      	lsrs	r2, r2, #16
 8007000:	f002 0104 	and.w	r1, r2, #4
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	69d2      	ldr	r2, [r2, #28]
 8007016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800701a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e01a      	b.n	800707c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f002 fd3c 	bl	8009adc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_SPI_Transmit+0x22>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e11c      	b.n	80072e0 <HAL_SPI_Transmit+0x25c>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ae:	f7fb fa23 	bl	80024f8 <HAL_GetTick>
 80070b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d002      	beq.n	80070ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070c8:	e101      	b.n	80072ce <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_SPI_Transmit+0x52>
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070da:	e0f8      	b.n	80072ce <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2203      	movs	r2, #3
 80070e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007122:	d107      	bne.n	8007134 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d007      	beq.n	8007152 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800715a:	d14b      	bne.n	80071f4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_SPI_Transmit+0xe6>
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d13e      	bne.n	80071e8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007172:	8812      	ldrh	r2, [r2, #0]
 8007174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	1c9a      	adds	r2, r3, #2
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800718e:	e02b      	b.n	80071e8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d112      	bne.n	80071c4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071a6:	8812      	ldrh	r2, [r2, #0]
 80071a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	1c9a      	adds	r2, r3, #2
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80071c2:	e011      	b.n	80071e8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c4:	f7fb f998 	bl	80024f8 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	1ad2      	subs	r2, r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d303      	bcc.n	80071dc <HAL_SPI_Transmit+0x158>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071da:	d102      	bne.n	80071e2 <HAL_SPI_Transmit+0x15e>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071e6:	e072      	b.n	80072ce <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1ce      	bne.n	8007190 <HAL_SPI_Transmit+0x10c>
 80071f2:	e04c      	b.n	800728e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_Transmit+0x17e>
 80071fc:	8afb      	ldrh	r3, [r7, #22]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d140      	bne.n	8007284 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007228:	e02c      	b.n	8007284 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d113      	bne.n	8007260 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007242:	7812      	ldrb	r2, [r2, #0]
 8007244:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	86da      	strh	r2, [r3, #54]	; 0x36
 800725e:	e011      	b.n	8007284 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007260:	f7fb f94a 	bl	80024f8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d303      	bcc.n	8007278 <HAL_SPI_Transmit+0x1f4>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007276:	d102      	bne.n	800727e <HAL_SPI_Transmit+0x1fa>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007282:	e024      	b.n	80072ce <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1cd      	bne.n	800722a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fbac 	bl	80079f0 <SPI_EndRxTxTransaction>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072de:	7ffb      	ldrb	r3, [r7, #31]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007304:	d112      	bne.n	800732c <HAL_SPI_Receive+0x44>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10e      	bne.n	800732c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2204      	movs	r2, #4
 8007312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f8e6 	bl	80074f4 <HAL_SPI_TransmitReceive>
 8007328:	4603      	mov	r3, r0
 800732a:	e0df      	b.n	80074ec <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007332:	2b01      	cmp	r3, #1
 8007334:	d101      	bne.n	800733a <HAL_SPI_Receive+0x52>
 8007336:	2302      	movs	r3, #2
 8007338:	e0d8      	b.n	80074ec <HAL_SPI_Receive+0x204>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007342:	f7fb f8d9 	bl	80024f8 <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d002      	beq.n	800735a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007354:	2302      	movs	r3, #2
 8007356:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007358:	e0bf      	b.n	80074da <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_Receive+0x7e>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800736a:	e0b6      	b.n	80074da <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2204      	movs	r2, #4
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b2:	d107      	bne.n	80073c4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d007      	beq.n	80073e2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d161      	bne.n	80074ae <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073ea:	e02d      	b.n	8007448 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d114      	bne.n	8007424 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	320c      	adds	r2, #12
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007422:	e011      	b.n	8007448 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007424:	f7fb f868 	bl	80024f8 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d303      	bcc.n	800743c <HAL_SPI_Receive+0x154>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800743a:	d102      	bne.n	8007442 <HAL_SPI_Receive+0x15a>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007446:	e048      	b.n	80074da <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1cc      	bne.n	80073ec <HAL_SPI_Receive+0x104>
 8007452:	e031      	b.n	80074b8 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b01      	cmp	r3, #1
 8007460:	d113      	bne.n	800748a <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	68d2      	ldr	r2, [r2, #12]
 800746c:	b292      	uxth	r2, r2
 800746e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007488:	e011      	b.n	80074ae <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800748a:	f7fb f835 	bl	80024f8 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d303      	bcc.n	80074a2 <HAL_SPI_Receive+0x1ba>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a0:	d102      	bne.n	80074a8 <HAL_SPI_Receive+0x1c0>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074ac:	e015      	b.n	80074da <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1cd      	bne.n	8007454 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fa31 	bl	8007924 <SPI_EndRxTransaction>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	; 0x30
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007502:	2301      	movs	r3, #1
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_SPI_TransmitReceive+0x26>
 8007516:	2302      	movs	r3, #2
 8007518:	e188      	b.n	800782c <HAL_SPI_TransmitReceive+0x338>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007522:	f7fa ffe9 	bl	80024f8 <HAL_GetTick>
 8007526:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800753c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007540:	2b01      	cmp	r3, #1
 8007542:	d00f      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x70>
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754a:	d107      	bne.n	800755c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d103      	bne.n	800755c <HAL_SPI_TransmitReceive+0x68>
 8007554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007558:	2b04      	cmp	r3, #4
 800755a:	d003      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800755c:	2302      	movs	r3, #2
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007562:	e159      	b.n	8007818 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x82>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x82>
 8007570:	887b      	ldrh	r3, [r7, #2]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800757c:	e14c      	b.n	8007818 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b04      	cmp	r3, #4
 8007588:	d003      	beq.n	8007592 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2205      	movs	r2, #5
 800758e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	887a      	ldrh	r2, [r7, #2]
 80075a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	887a      	ldrh	r2, [r7, #2]
 80075a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	887a      	ldrh	r2, [r7, #2]
 80075b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d007      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ee:	d178      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x10a>
 80075f8:	8b7b      	ldrh	r3, [r7, #26]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d166      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007606:	8812      	ldrh	r2, [r2, #0]
 8007608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007622:	e053      	b.n	80076cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d11b      	bne.n	800766a <HAL_SPI_TransmitReceive+0x176>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d016      	beq.n	800766a <HAL_SPI_TransmitReceive+0x176>
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	2b01      	cmp	r3, #1
 8007640:	d113      	bne.n	800766a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800764a:	8812      	ldrh	r2, [r2, #0]
 800764c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b01      	cmp	r3, #1
 8007676:	d119      	bne.n	80076ac <HAL_SPI_TransmitReceive+0x1b8>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d014      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	68d2      	ldr	r2, [r2, #12]
 800768c:	b292      	uxth	r2, r2
 800768e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	1c9a      	adds	r2, r3, #2
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076a8:	2301      	movs	r3, #1
 80076aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076ac:	f7fa ff24 	bl	80024f8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d307      	bcc.n	80076cc <HAL_SPI_TransmitReceive+0x1d8>
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c2:	d003      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076ca:	e0a5      	b.n	8007818 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1a6      	bne.n	8007624 <HAL_SPI_TransmitReceive+0x130>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1a1      	bne.n	8007624 <HAL_SPI_TransmitReceive+0x130>
 80076e0:	e07c      	b.n	80077dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x1fc>
 80076ea:	8b7b      	ldrh	r3, [r7, #26]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d16b      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007716:	e057      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b02      	cmp	r3, #2
 8007724:	d11c      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x26c>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d017      	beq.n	8007760 <HAL_SPI_TransmitReceive+0x26c>
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d114      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b01      	cmp	r3, #1
 800776c:	d119      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x2ae>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	68d2      	ldr	r2, [r2, #12]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800779e:	2301      	movs	r3, #1
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077a2:	f7fa fea9 	bl	80024f8 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d303      	bcc.n	80077ba <HAL_SPI_TransmitReceive+0x2c6>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b8:	d102      	bne.n	80077c0 <HAL_SPI_TransmitReceive+0x2cc>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077c6:	e027      	b.n	8007818 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1a2      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x224>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d19d      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f905 	bl	80079f0 <SPI_EndRxTxTransaction>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077f8:	e00e      	b.n	8007818 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800782c:	4618      	mov	r0, r3
 800782e:	3730      	adds	r7, #48	; 0x30
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007842:	b2db      	uxtb	r3, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	4613      	mov	r3, r2
 800785e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007860:	e04c      	b.n	80078fc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007868:	d048      	beq.n	80078fc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800786a:	f7fa fe45 	bl	80024f8 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d202      	bcs.n	8007880 <SPI_WaitFlagStateUntilTimeout+0x30>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d13d      	bne.n	80078fc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	6852      	ldr	r2, [r2, #4]
 800788a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800788e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007898:	d111      	bne.n	80078be <SPI_WaitFlagStateUntilTimeout+0x6e>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078a2:	d004      	beq.n	80078ae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ac:	d107      	bne.n	80078be <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	d10f      	bne.n	80078e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e00f      	b.n	800791c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	401a      	ands	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	429a      	cmp	r2, r3
 8007918:	d1a3      	bne.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007938:	d111      	bne.n	800795e <SPI_EndRxTransaction+0x3a>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007942:	d004      	beq.n	800794e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794c:	d107      	bne.n	800795e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007966:	d12a      	bne.n	80079be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d012      	beq.n	8007998 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff ff67 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d02d      	beq.n	80079e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798c:	f043 0220 	orr.w	r2, r3, #32
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e026      	b.n	80079e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	2101      	movs	r1, #1
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff ff54 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01a      	beq.n	80079e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f043 0220 	orr.w	r2, r3, #32
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e013      	b.n	80079e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2101      	movs	r1, #1
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff ff41 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d8:	f043 0220 	orr.w	r2, r3, #32
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e000      	b.n	80079e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <SPI_EndRxTxTransaction+0x7c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <SPI_EndRxTxTransaction+0x80>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	0d5b      	lsrs	r3, r3, #21
 8007a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a0c:	fb02 f303 	mul.w	r3, r2, r3
 8007a10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1a:	d112      	bne.n	8007a42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ff12 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e00f      	b.n	8007a62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d0f2      	beq.n	8007a42 <SPI_EndRxTxTransaction+0x52>
 8007a5c:	e000      	b.n	8007a60 <SPI_EndRxTxTransaction+0x70>
        break;
 8007a5e:	bf00      	nop
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	2000007c 	.word	0x2000007c
 8007a70:	165e9f81 	.word	0x165e9f81

08007a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e01d      	b.n	8007ac2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f002 f9a0 	bl	8009de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f000 fa14 	bl	8007ee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	68d2      	ldr	r2, [r2, #12]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b06      	cmp	r3, #6
 8007af2:	d007      	beq.n	8007b04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d122      	bne.n	8007b6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d11b      	bne.n	8007b6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f06f 0202 	mvn.w	r2, #2
 8007b3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f003 0303 	and.w	r3, r3, #3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9a5 	bl	8007ea4 <HAL_TIM_IC_CaptureCallback>
 8007b5a:	e005      	b.n	8007b68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f997 	bl	8007e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f9a8 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d122      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d11b      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f06f 0204 	mvn.w	r2, #4
 8007b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f97b 	bl	8007ea4 <HAL_TIM_IC_CaptureCallback>
 8007bae:	e005      	b.n	8007bbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f96d 	bl	8007e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f97e 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d122      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d11b      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f06f 0208 	mvn.w	r2, #8
 8007be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2204      	movs	r2, #4
 8007bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f951 	bl	8007ea4 <HAL_TIM_IC_CaptureCallback>
 8007c02:	e005      	b.n	8007c10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f943 	bl	8007e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f954 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0310 	and.w	r3, r3, #16
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d122      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d11b      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f06f 0210 	mvn.w	r2, #16
 8007c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f927 	bl	8007ea4 <HAL_TIM_IC_CaptureCallback>
 8007c56:	e005      	b.n	8007c64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f919 	bl	8007e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f92a 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10e      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d107      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0201 	mvn.w	r2, #1
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fe63 	bl	800995c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca0:	2b80      	cmp	r3, #128	; 0x80
 8007ca2:	d10e      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d107      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa98 	bl	80081f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d10e      	bne.n	8007cee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d107      	bne.n	8007cee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f8ef 	bl	8007ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d10e      	bne.n	8007d1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d107      	bne.n	8007d1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f06f 0220 	mvn.w	r2, #32
 8007d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa62 	bl	80081de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_ConfigClockSource+0x18>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0a6      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x166>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d067      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0x120>
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d80b      	bhi.n	8007d8e <HAL_TIM_ConfigClockSource+0x6c>
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d073      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x140>
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d802      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x62>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d06f      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d82:	e078      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d06c      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x140>
 8007d88:	2b30      	cmp	r3, #48	; 0x30
 8007d8a:	d06a      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d8c:	e073      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d8e:	2b70      	cmp	r3, #112	; 0x70
 8007d90:	d00d      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x8c>
 8007d92:	2b70      	cmp	r3, #112	; 0x70
 8007d94:	d804      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x7e>
 8007d96:	2b50      	cmp	r3, #80	; 0x50
 8007d98:	d033      	beq.n	8007e02 <HAL_TIM_ConfigClockSource+0xe0>
 8007d9a:	2b60      	cmp	r3, #96	; 0x60
 8007d9c:	d041      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d9e:	e06a      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d066      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x152>
 8007da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007daa:	d017      	beq.n	8007ddc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007dac:	e063      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f000 f9a9 	bl	8008114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	609a      	str	r2, [r3, #8]
      break;
 8007dda:	e04c      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	6899      	ldr	r1, [r3, #8]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f000 f992 	bl	8008114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	6892      	ldr	r2, [r2, #8]
 8007dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfe:	609a      	str	r2, [r3, #8]
      break;
 8007e00:	e039      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6859      	ldr	r1, [r3, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f000 f906 	bl	8008020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2150      	movs	r1, #80	; 0x50
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f95f 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e20:	e029      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6859      	ldr	r1, [r3, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f000 f925 	bl	800807e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2160      	movs	r1, #96	; 0x60
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f94f 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e40:	e019      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 f8e6 	bl	8008020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f93f 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e60:	e009      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f000 f936 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e72:	e000      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a40      	ldr	r2, [pc, #256]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d00f      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a3d      	ldr	r2, [pc, #244]	; (8007ff8 <TIM_Base_SetConfig+0x118>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a3c      	ldr	r2, [pc, #240]	; (8007ffc <TIM_Base_SetConfig+0x11c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3b      	ldr	r2, [pc, #236]	; (8008000 <TIM_Base_SetConfig+0x120>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3a      	ldr	r2, [pc, #232]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d108      	bne.n	8007f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2f      	ldr	r2, [pc, #188]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d02b      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f40:	d027      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2c      	ldr	r2, [pc, #176]	; (8007ff8 <TIM_Base_SetConfig+0x118>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d023      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2b      	ldr	r2, [pc, #172]	; (8007ffc <TIM_Base_SetConfig+0x11c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d01f      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2a      	ldr	r2, [pc, #168]	; (8008000 <TIM_Base_SetConfig+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01b      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a29      	ldr	r2, [pc, #164]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d017      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a28      	ldr	r2, [pc, #160]	; (8008008 <TIM_Base_SetConfig+0x128>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a27      	ldr	r2, [pc, #156]	; (800800c <TIM_Base_SetConfig+0x12c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00f      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a26      	ldr	r2, [pc, #152]	; (8008010 <TIM_Base_SetConfig+0x130>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00b      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a25      	ldr	r2, [pc, #148]	; (8008014 <TIM_Base_SetConfig+0x134>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d007      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a24      	ldr	r2, [pc, #144]	; (8008018 <TIM_Base_SetConfig+0x138>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a23      	ldr	r2, [pc, #140]	; (800801c <TIM_Base_SetConfig+0x13c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d108      	bne.n	8007fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a0a      	ldr	r2, [pc, #40]	; (8007ff4 <TIM_Base_SetConfig+0x114>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_Base_SetConfig+0xf8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a0c      	ldr	r2, [pc, #48]	; (8008004 <TIM_Base_SetConfig+0x124>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d103      	bne.n	8007fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	615a      	str	r2, [r3, #20]
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40010400 	.word	0x40010400
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400
 8008010:	40014800 	.word	0x40014800
 8008014:	40001800 	.word	0x40001800
 8008018:	40001c00 	.word	0x40001c00
 800801c:	40002000 	.word	0x40002000

08008020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0201 	bic.w	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800804a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f023 030a 	bic.w	r3, r3, #10
 800805c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807e:	b480      	push	{r7}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f023 0210 	bic.w	r2, r3, #16
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	031b      	lsls	r3, r3, #12
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f043 0307 	orr.w	r3, r3, #7
 8008100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	609a      	str	r2, [r3, #8]
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800812e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	431a      	orrs	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4313      	orrs	r3, r2
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008168:	2302      	movs	r3, #2
 800816a:	e032      	b.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d029      	beq.n	8008274 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800822c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008230:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800823a:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008240:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008246:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800824c:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008252:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008258:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800825e:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008264:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e034      	b.n	80082de <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008280:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800828a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008290:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082a8:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082b2:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80082b8:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80082be:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80082c4:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80082ca:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d02e      	beq.n	8008364 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008312:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	3b01      	subs	r3, #1
 8008320:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008322:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	3b01      	subs	r3, #1
 800832a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800832c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	3b01      	subs	r3, #1
 8008334:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008336:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	3b01      	subs	r3, #1
 800833e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008340:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	3b01      	subs	r3, #1
 8008348:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800834a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	3b01      	subs	r3, #1
 8008352:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008354:	4313      	orrs	r3, r2
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	609a      	str	r2, [r3, #8]
 8008362:	e03b      	b.n	80083dc <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008374:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	3b01      	subs	r3, #1
 800837c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	3b01      	subs	r3, #1
 8008384:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008386:	4313      	orrs	r3, r2
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800839a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80083aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80083b4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80083be:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80083c8:	4313      	orrs	r3, r2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b086      	sub	sp, #24
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008406:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	3b01      	subs	r3, #1
 800840e:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008410:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008422:	f7fa f869 	bl	80024f8 <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008428:	e010      	b.n	800844c <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008430:	d00c      	beq.n	800844c <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <FMC_SDRAM_SendCommand+0x5e>
 8008438:	f7fa f85e 	bl	80024f8 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	1ad2      	subs	r2, r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	429a      	cmp	r2, r3
 8008446:	d901      	bls.n	800844c <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e006      	b.n	800845a <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b20      	cmp	r3, #32
 8008456:	d0e8      	beq.n	800842a <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	695a      	ldr	r2, [r3, #20]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f043 0201 	orr.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	f043 0220 	orr.w	r2, r3, #32
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4a09      	ldr	r2, [pc, #36]	; (8008514 <USB_FlushTxFifo+0x48>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d901      	bls.n	80084f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e006      	b.n	8008506 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b20      	cmp	r3, #32
 8008502:	d0f0      	beq.n	80084e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	00030d40 	.word	0x00030d40

08008518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2210      	movs	r2, #16
 8008528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <USB_FlushRxFifo+0x40>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d901      	bls.n	800853c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e006      	b.n	800854a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b10      	cmp	r3, #16
 8008546:	d0f0      	beq.n	800852a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	00030d40 	.word	0x00030d40

0800855c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	; 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	3303      	adds	r3, #3
 8008576:	089b      	lsrs	r3, r3, #2
 8008578:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800857a:	2300      	movs	r3, #0
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e00b      	b.n	8008598 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	601a      	str	r2, [r3, #0]
    pDest++;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3304      	adds	r3, #4
 8008590:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	3301      	adds	r3, #1
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	429a      	cmp	r2, r3
 800859e:	d3ef      	bcc.n	8008580 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3724      	adds	r7, #36	; 0x24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4013      	ands	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	f003 0301 	and.w	r3, r3, #1
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800861c:	4619      	mov	r1, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	4313      	orrs	r3, r2
 800862e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d107      	bne.n	8008646 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800863c:	461a      	mov	r2, r3
 800863e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008642:	6053      	str	r3, [r2, #4]
 8008644:	e009      	b.n	800865a <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d106      	bne.n	800865a <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008652:	461a      	mov	r2, r3
 8008654:	f241 7370 	movw	r3, #6000	; 0x1770
 8008658:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800868c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <USB_DriveVbus+0x46>
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d107      	bne.n	80086ae <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086a4:	461a      	mov	r2, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086ac:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b8:	d10a      	bne.n	80086d0 <USB_DriveVbus+0x68>
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086c6:	461a      	mov	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	b29b      	uxth	r3, r3
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	0c9b      	lsrs	r3, r3, #18
 8008728:	f003 0303 	and.w	r3, r3, #3
 800872c:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <USB_HC_Halt+0x3a>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d171      	bne.n	800881e <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	4413      	add	r3, r2
 8008742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008746:	4619      	mov	r1, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4413      	add	r3, r2
 8008750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800875a:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d146      	bne.n	80087f6 <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4413      	add	r3, r2
 8008770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008774:	4619      	mov	r1, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008788:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008796:	4619      	mov	r1, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087aa:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b8:	4619      	mov	r1, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087cc:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	3301      	adds	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087da:	d81e      	bhi.n	800881a <USB_HC_Halt+0x11a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f2:	d0ec      	beq.n	80087ce <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087f4:	e086      	b.n	8008904 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	4619      	mov	r1, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008816:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008818:	e074      	b.n	8008904 <USB_HC_Halt+0x204>
          break;
 800881a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800881c:	e072      	b.n	8008904 <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882a:	4619      	mov	r1, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883e:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d146      	bne.n	80088de <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885c:	4619      	mov	r1, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008870:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	4413      	add	r3, r2
 800887a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887e:	4619      	mov	r1, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008892:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a0:	4619      	mov	r1, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088b4:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	3301      	adds	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c2:	d81e      	bhi.n	8008902 <USB_HC_Halt+0x202>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088da:	d0ec      	beq.n	80088b6 <USB_HC_Halt+0x1b6>
 80088dc:	e012      	b.n	8008904 <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ea:	4619      	mov	r1, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088fe:	600b      	str	r3, [r1, #0]
 8008900:	e000      	b.n	8008904 <USB_HC_Halt+0x204>
          break;
 8008902:	bf00      	nop
    }
  }

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fdc1 	bl	80084aa <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008928:	2110      	movs	r1, #16
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fdce 	bl	80084cc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff fdf1 	bl	8008518 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	e01f      	b.n	800897c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008952:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800895a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008962:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4413      	add	r3, r2
 800896c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008970:	461a      	mov	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	3301      	adds	r3, #1
 800897a:	613b      	str	r3, [r7, #16]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	d9dc      	bls.n	800893c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008982:	2300      	movs	r3, #0
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	e034      	b.n	80089f2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ae:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089bc:	461a      	mov	r2, r3
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	3301      	adds	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ce:	d80c      	bhi.n	80089ea <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e6:	d0ec      	beq.n	80089c2 <USB_StopHost+0xb0>
 80089e8:	e000      	b.n	80089ec <USB_StopHost+0xda>
        break;
 80089ea:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	3301      	adds	r3, #1
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b0f      	cmp	r3, #15
 80089f6:	d9c7      	bls.n	8008988 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fe:	461a      	mov	r2, r3
 8008a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a04:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a0c:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fd3a 	bl	8008488 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f804 	bl	8008a42 <USBH_HandleSof>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b0b      	cmp	r3, #11
 8008a52:	d10a      	bne.n	8008a6a <USBH_HandleSof+0x28>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008a82:	bf00      	nop
}
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008a9e:	bf00      	nop
}
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10f      	bne.n	8008adc <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ad4:	2104      	movs	r1, #4
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
 8008ada:	e007      	b.n	8008aec <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d102      	bne.n	8008aec <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fa05 	bl	8009f0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f820 	bl	8008b50 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	795b      	ldrb	r3, [r3, #5]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f81a 	bl	8008b50 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b34:	2105      	movs	r1, #5
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f9cc 	bl	8009ed8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	2b0a      	cmp	r3, #10
 8008b60:	d80b      	bhi.n	8008b7a <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	78f9      	ldrb	r1, [r7, #3]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	31e0      	adds	r1, #224	; 0xe0
 8008b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b6e:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32e0      	adds	r2, #224	; 0xe0
 8008b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <MX_CRC_Init+0x20>)
 8008b8e:	4a07      	ldr	r2, [pc, #28]	; (8008bac <MX_CRC_Init+0x24>)
 8008b90:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008b92:	4805      	ldr	r0, [pc, #20]	; (8008ba8 <MX_CRC_Init+0x20>)
 8008b94:	f7f9 fdbe 	bl	8002714 <HAL_CRC_Init>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008b9e:	f000 ff17 	bl	80099d0 <Error_Handler>
  }

}
 8008ba2:	bf00      	nop
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000364 	.word	0x20000364
 8008bac:	40023000 	.word	0x40023000

08008bb0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <HAL_CRC_MspInit+0x3c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d10d      	bne.n	8008bde <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <HAL_CRC_MspInit+0x40>)
 8008bc8:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <HAL_CRC_MspInit+0x40>)
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bd2:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <HAL_CRC_MspInit+0x40>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40023000 	.word	0x40023000
 8008bf0:	40023800 	.word	0x40023800

08008bf4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008bfa:	4a16      	ldr	r2, [pc, #88]	; (8008c54 <MX_DMA2D_Init+0x60>)
 8008bfc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8008bfe:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008c04:	4b12      	ldr	r3, [pc, #72]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008c1c:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008c28:	4809      	ldr	r0, [pc, #36]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c2a:	f7f9 ff4f 	bl	8002acc <HAL_DMA2D_Init>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8008c34:	f000 fecc 	bl	80099d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <MX_DMA2D_Init+0x5c>)
 8008c3c:	f7fa f9b4 	bl	8002fa8 <HAL_DMA2D_ConfigLayer>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8008c46:	f000 fec3 	bl	80099d0 <Error_Handler>
  }

}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000036c 	.word	0x2000036c
 8008c54:	4002b000 	.word	0x4002b000

08008c58 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a0e      	ldr	r2, [pc, #56]	; (8008ca0 <HAL_DMA2D_MspInit+0x48>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d115      	bne.n	8008c96 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ca4 <HAL_DMA2D_MspInit+0x4c>)
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <HAL_DMA2D_MspInit+0x4c>)
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c78:	6313      	str	r3, [r2, #48]	; 0x30
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <HAL_DMA2D_MspInit+0x4c>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8008c86:	2200      	movs	r2, #0
 8008c88:	2105      	movs	r1, #5
 8008c8a:	205a      	movs	r0, #90	; 0x5a
 8008c8c:	f7f9 fd18 	bl	80026c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008c90:	205a      	movs	r0, #90	; 0x5a
 8008c92:	f7f9 fd31 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	4002b000 	.word	0x4002b000
 8008ca4:	40023800 	.word	0x40023800

08008ca8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8008cae:	1d3b      	adds	r3, r7, #4
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	611a      	str	r2, [r3, #16]
 8008cbc:	615a      	str	r2, [r3, #20]
 8008cbe:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008cc0:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cc2:	4a20      	ldr	r2, [pc, #128]	; (8008d44 <MX_FMC_Init+0x9c>)
 8008cc4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cc8:	2201      	movs	r2, #1
 8008cca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008ccc:	4b1c      	ldr	r3, [pc, #112]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008cd8:	4b19      	ldr	r3, [pc, #100]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cda:	2210      	movs	r2, #16
 8008cdc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008cde:	4b18      	ldr	r3, [pc, #96]	; (8008d40 <MX_FMC_Init+0x98>)
 8008ce0:	2240      	movs	r2, #64	; 0x40
 8008ce2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8008ce4:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <MX_FMC_Init+0x98>)
 8008ce6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008cea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8008cf2:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <MX_FMC_Init+0x98>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <MX_FMC_Init+0x98>)
 8008d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d06:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8008d0c:	2307      	movs	r3, #7
 8008d0e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8008d10:	2304      	movs	r3, #4
 8008d12:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8008d14:	2307      	movs	r3, #7
 8008d16:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8008d20:	2302      	movs	r3, #2
 8008d22:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <MX_FMC_Init+0x98>)
 8008d2a:	f7fe f8a1 	bl	8006e70 <HAL_SDRAM_Init>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8008d34:	f000 fe4c 	bl	80099d0 <Error_Handler>
  }

}
 8008d38:	bf00      	nop
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200003ac 	.word	0x200003ac
 8008d44:	a0000140 	.word	0xa0000140

08008d48 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d4e:	1d3b      	adds	r3, r7, #4
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	605a      	str	r2, [r3, #4]
 8008d56:	609a      	str	r2, [r3, #8]
 8008d58:	60da      	str	r2, [r3, #12]
 8008d5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8008d5c:	4b3b      	ldr	r3, [pc, #236]	; (8008e4c <HAL_FMC_MspInit+0x104>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d16f      	bne.n	8008e44 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8008d64:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <HAL_FMC_MspInit+0x104>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4a38      	ldr	r2, [pc, #224]	; (8008e50 <HAL_FMC_MspInit+0x108>)
 8008d70:	4b37      	ldr	r3, [pc, #220]	; (8008e50 <HAL_FMC_MspInit+0x108>)
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	6393      	str	r3, [r2, #56]	; 0x38
 8008d7a:	4b35      	ldr	r3, [pc, #212]	; (8008e50 <HAL_FMC_MspInit+0x108>)
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8008d86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008d8a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d94:	2303      	movs	r3, #3
 8008d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008d98:	230c      	movs	r3, #12
 8008d9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008d9c:	1d3b      	adds	r3, r7, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	482c      	ldr	r0, [pc, #176]	; (8008e54 <HAL_FMC_MspInit+0x10c>)
 8008da2:	f7fa fa2d 	bl	8003200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8008da6:	2301      	movs	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008daa:	2302      	movs	r3, #2
 8008dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008db2:	2303      	movs	r3, #3
 8008db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008db6:	230c      	movs	r3, #12
 8008db8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8008dba:	1d3b      	adds	r3, r7, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4826      	ldr	r0, [pc, #152]	; (8008e58 <HAL_FMC_MspInit+0x110>)
 8008dc0:	f7fa fa1e 	bl	8003200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8008dc4:	f248 1333 	movw	r3, #33075	; 0x8133
 8008dc8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008dda:	1d3b      	adds	r3, r7, #4
 8008ddc:	4619      	mov	r1, r3
 8008dde:	481f      	ldr	r0, [pc, #124]	; (8008e5c <HAL_FMC_MspInit+0x114>)
 8008de0:	f7fa fa0e 	bl	8003200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8008de4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008de8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dea:	2302      	movs	r3, #2
 8008dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008df2:	2303      	movs	r3, #3
 8008df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008df6:	230c      	movs	r3, #12
 8008df8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008dfa:	1d3b      	adds	r3, r7, #4
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4818      	ldr	r0, [pc, #96]	; (8008e60 <HAL_FMC_MspInit+0x118>)
 8008e00:	f7fa f9fe 	bl	8003200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8008e04:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008e08:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e12:	2303      	movs	r3, #3
 8008e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e16:	230c      	movs	r3, #12
 8008e18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e1a:	1d3b      	adds	r3, r7, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4811      	ldr	r0, [pc, #68]	; (8008e64 <HAL_FMC_MspInit+0x11c>)
 8008e20:	f7fa f9ee 	bl	8003200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8008e24:	2360      	movs	r3, #96	; 0x60
 8008e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e30:	2303      	movs	r3, #3
 8008e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008e34:	230c      	movs	r3, #12
 8008e36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e38:	1d3b      	adds	r3, r7, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	480a      	ldr	r0, [pc, #40]	; (8008e68 <HAL_FMC_MspInit+0x120>)
 8008e3e:	f7fa f9df 	bl	8003200 <HAL_GPIO_Init>
 8008e42:	e000      	b.n	8008e46 <HAL_FMC_MspInit+0xfe>
    return;
 8008e44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20000258 	.word	0x20000258
 8008e50:	40023800 	.word	0x40023800
 8008e54:	40021400 	.word	0x40021400
 8008e58:	40020800 	.word	0x40020800
 8008e5c:	40021800 	.word	0x40021800
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40020c00 	.word	0x40020c00
 8008e68:	40020400 	.word	0x40020400

08008e6c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008e74:	f7ff ff68 	bl	8008d48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08e      	sub	sp, #56	; 0x38
 8008e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	605a      	str	r2, [r3, #4]
 8008e90:	609a      	str	r2, [r3, #8]
 8008e92:	60da      	str	r2, [r3, #12]
 8008e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e96:	2300      	movs	r3, #0
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	4a7a      	ldr	r2, [pc, #488]	; (8009084 <MX_GPIO_Init+0x204>)
 8008e9c:	4b79      	ldr	r3, [pc, #484]	; (8009084 <MX_GPIO_Init+0x204>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	f043 0304 	orr.w	r3, r3, #4
 8008ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea6:	4b77      	ldr	r3, [pc, #476]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f003 0304 	and.w	r3, r3, #4
 8008eae:	623b      	str	r3, [r7, #32]
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	4a73      	ldr	r2, [pc, #460]	; (8009084 <MX_GPIO_Init+0x204>)
 8008eb8:	4b72      	ldr	r3, [pc, #456]	; (8009084 <MX_GPIO_Init+0x204>)
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	f043 0320 	orr.w	r3, r3, #32
 8008ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec2:	4b70      	ldr	r3, [pc, #448]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	4a6c      	ldr	r2, [pc, #432]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ed4:	4b6b      	ldr	r3, [pc, #428]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008edc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ede:	4b69      	ldr	r3, [pc, #420]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	4a65      	ldr	r2, [pc, #404]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ef0:	4b64      	ldr	r3, [pc, #400]	; (8009084 <MX_GPIO_Init+0x204>)
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8008efa:	4b62      	ldr	r3, [pc, #392]	; (8009084 <MX_GPIO_Init+0x204>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	4a5e      	ldr	r2, [pc, #376]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f0c:	4b5d      	ldr	r3, [pc, #372]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	f043 0302 	orr.w	r3, r3, #2
 8008f14:	6313      	str	r3, [r2, #48]	; 0x30
 8008f16:	4b5b      	ldr	r3, [pc, #364]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	4a57      	ldr	r2, [pc, #348]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f28:	4b56      	ldr	r3, [pc, #344]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f30:	6313      	str	r3, [r2, #48]	; 0x30
 8008f32:	4b54      	ldr	r3, [pc, #336]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	4a50      	ldr	r2, [pc, #320]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f44:	4b4f      	ldr	r3, [pc, #316]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	f043 0310 	orr.w	r3, r3, #16
 8008f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f4e:	4b4d      	ldr	r3, [pc, #308]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	f003 0310 	and.w	r3, r3, #16
 8008f56:	60bb      	str	r3, [r7, #8]
 8008f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
 8008f5e:	4a49      	ldr	r2, [pc, #292]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f60:	4b48      	ldr	r3, [pc, #288]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	f043 0308 	orr.w	r3, r3, #8
 8008f68:	6313      	str	r3, [r2, #48]	; 0x30
 8008f6a:	4b46      	ldr	r3, [pc, #280]	; (8009084 <MX_GPIO_Init+0x204>)
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	607b      	str	r3, [r7, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8008f76:	2200      	movs	r2, #0
 8008f78:	2116      	movs	r1, #22
 8008f7a:	4843      	ldr	r0, [pc, #268]	; (8009088 <MX_GPIO_Init+0x208>)
 8008f7c:	f7fa fbf6 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8008f80:	2200      	movs	r2, #0
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	4841      	ldr	r0, [pc, #260]	; (800908c <MX_GPIO_Init+0x20c>)
 8008f86:	f7fa fbf1 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8008f90:	483f      	ldr	r0, [pc, #252]	; (8009090 <MX_GPIO_Init+0x210>)
 8008f92:	f7fa fbeb 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8008f96:	2200      	movs	r2, #0
 8008f98:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8008f9c:	483d      	ldr	r0, [pc, #244]	; (8009094 <MX_GPIO_Init+0x214>)
 8008f9e:	f7fa fbe5 	bl	800376c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8008fa2:	2316      	movs	r3, #22
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4833      	ldr	r0, [pc, #204]	; (8009088 <MX_GPIO_Init+0x208>)
 8008fba:	f7fa f921 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8008fbe:	f248 0307 	movw	r3, #32775	; 0x8007
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008fc4:	4b34      	ldr	r3, [pc, #208]	; (8009098 <MX_GPIO_Init+0x218>)
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	482e      	ldr	r0, [pc, #184]	; (800908c <MX_GPIO_Init+0x20c>)
 8008fd4:	f7fa f914 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8008fd8:	2380      	movs	r3, #128	; 0x80
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8008fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fec:	4619      	mov	r1, r3
 8008fee:	4827      	ldr	r0, [pc, #156]	; (800908c <MX_GPIO_Init+0x20c>)
 8008ff0:	f7fa f906 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008ff8:	4b27      	ldr	r3, [pc, #156]	; (8009098 <MX_GPIO_Init+0x218>)
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8009000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009004:	4619      	mov	r1, r3
 8009006:	4820      	ldr	r0, [pc, #128]	; (8009088 <MX_GPIO_Init+0x208>)
 8009008:	f7fa f8fa 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800900c:	2304      	movs	r3, #4
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009010:	2300      	movs	r3, #0
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009014:	2300      	movs	r3, #0
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800901c:	4619      	mov	r1, r3
 800901e:	481f      	ldr	r0, [pc, #124]	; (800909c <MX_GPIO_Init+0x21c>)
 8009020:	f7fa f8ee 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8009024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800902a:	2300      	movs	r3, #0
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800902e:	2300      	movs	r3, #0
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8009032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009036:	4619      	mov	r1, r3
 8009038:	4815      	ldr	r0, [pc, #84]	; (8009090 <MX_GPIO_Init+0x210>)
 800903a:	f7fa f8e1 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800903e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009044:	2301      	movs	r3, #1
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009048:	2300      	movs	r3, #0
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800904c:	2300      	movs	r3, #0
 800904e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009054:	4619      	mov	r1, r3
 8009056:	480e      	ldr	r0, [pc, #56]	; (8009090 <MX_GPIO_Init+0x210>)
 8009058:	f7fa f8d2 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800905c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009062:	2301      	movs	r3, #1
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800906a:	2300      	movs	r3, #0
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800906e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009072:	4619      	mov	r1, r3
 8009074:	4807      	ldr	r0, [pc, #28]	; (8009094 <MX_GPIO_Init+0x214>)
 8009076:	f7fa f8c3 	bl	8003200 <HAL_GPIO_Init>

}
 800907a:	bf00      	nop
 800907c:	3738      	adds	r7, #56	; 0x38
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40023800 	.word	0x40023800
 8009088:	40020800 	.word	0x40020800
 800908c:	40020000 	.word	0x40020000
 8009090:	40020c00 	.word	0x40020c00
 8009094:	40021800 	.word	0x40021800
 8009098:	10120000 	.word	0x10120000
 800909c:	40020400 	.word	0x40020400

080090a0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <MX_I2C3_Init+0x74>)
 80090a6:	4a1c      	ldr	r2, [pc, #112]	; (8009118 <MX_I2C3_Init+0x78>)
 80090a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80090aa:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <MX_I2C3_Init+0x74>)
 80090ac:	4a1b      	ldr	r2, [pc, #108]	; (800911c <MX_I2C3_Init+0x7c>)
 80090ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80090b0:	4b18      	ldr	r3, [pc, #96]	; (8009114 <MX_I2C3_Init+0x74>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80090b6:	4b17      	ldr	r3, [pc, #92]	; (8009114 <MX_I2C3_Init+0x74>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80090bc:	4b15      	ldr	r3, [pc, #84]	; (8009114 <MX_I2C3_Init+0x74>)
 80090be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80090c4:	4b13      	ldr	r3, [pc, #76]	; (8009114 <MX_I2C3_Init+0x74>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <MX_I2C3_Init+0x74>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80090d0:	4b10      	ldr	r3, [pc, #64]	; (8009114 <MX_I2C3_Init+0x74>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <MX_I2C3_Init+0x74>)
 80090d8:	2200      	movs	r2, #0
 80090da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80090dc:	480d      	ldr	r0, [pc, #52]	; (8009114 <MX_I2C3_Init+0x74>)
 80090de:	f7fb fd03 	bl	8004ae8 <HAL_I2C_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80090e8:	f000 fc72 	bl	80099d0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80090ec:	2100      	movs	r1, #0
 80090ee:	4809      	ldr	r0, [pc, #36]	; (8009114 <MX_I2C3_Init+0x74>)
 80090f0:	f7fc fcb5 	bl	8005a5e <HAL_I2CEx_ConfigAnalogFilter>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80090fa:	f000 fc69 	bl	80099d0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80090fe:	2100      	movs	r1, #0
 8009100:	4804      	ldr	r0, [pc, #16]	; (8009114 <MX_I2C3_Init+0x74>)
 8009102:	f7fc fce8 	bl	8005ad6 <HAL_I2CEx_ConfigDigitalFilter>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800910c:	f000 fc60 	bl	80099d0 <Error_Handler>
  }

}
 8009110:	bf00      	nop
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200003e0 	.word	0x200003e0
 8009118:	40005c00 	.word	0x40005c00
 800911c:	00061a80 	.word	0x00061a80

08009120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08a      	sub	sp, #40	; 0x28
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <HAL_I2C_MspInit+0xc4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d14b      	bne.n	80091da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009142:	2300      	movs	r3, #0
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	4a28      	ldr	r2, [pc, #160]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	6313      	str	r3, [r2, #48]	; 0x30
 8009152:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f003 0304 	and.w	r3, r3, #4
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	4a21      	ldr	r2, [pc, #132]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 8009164:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	f043 0301 	orr.w	r3, r3, #1
 800916c:	6313      	str	r3, [r2, #48]	; 0x30
 800916e:	4b1e      	ldr	r3, [pc, #120]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800917a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800917e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009180:	2312      	movs	r3, #18
 8009182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009184:	2301      	movs	r3, #1
 8009186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009188:	2300      	movs	r3, #0
 800918a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800918c:	2304      	movs	r3, #4
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8009190:	f107 0314 	add.w	r3, r7, #20
 8009194:	4619      	mov	r1, r3
 8009196:	4815      	ldr	r0, [pc, #84]	; (80091ec <HAL_I2C_MspInit+0xcc>)
 8009198:	f7fa f832 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800919c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80091a2:	2312      	movs	r3, #18
 80091a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091a6:	2301      	movs	r3, #1
 80091a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091aa:	2300      	movs	r3, #0
 80091ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80091ae:	2304      	movs	r3, #4
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4619      	mov	r1, r3
 80091b8:	480d      	ldr	r0, [pc, #52]	; (80091f0 <HAL_I2C_MspInit+0xd0>)
 80091ba:	f7fa f821 	bl	8003200 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80091be:	2300      	movs	r3, #0
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 80091c4:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 80091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091cc:	6413      	str	r3, [r2, #64]	; 0x40
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <HAL_I2C_MspInit+0xc8>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091d6:	60bb      	str	r3, [r7, #8]
 80091d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80091da:	bf00      	nop
 80091dc:	3728      	adds	r7, #40	; 0x28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40005c00 	.word	0x40005c00
 80091e8:	40023800 	.word	0x40023800
 80091ec:	40020800 	.word	0x40020800
 80091f0:	40020000 	.word	0x40020000

080091f4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a0b      	ldr	r2, [pc, #44]	; (8009230 <HAL_I2C_MspDeInit+0x3c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d10f      	bne.n	8009226 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8009206:	4a0b      	ldr	r2, [pc, #44]	; (8009234 <HAL_I2C_MspDeInit+0x40>)
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <HAL_I2C_MspDeInit+0x40>)
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009210:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8009212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009216:	4808      	ldr	r0, [pc, #32]	; (8009238 <HAL_I2C_MspDeInit+0x44>)
 8009218:	f7fa f99c 	bl	8003554 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 800921c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009220:	4806      	ldr	r0, [pc, #24]	; (800923c <HAL_I2C_MspDeInit+0x48>)
 8009222:	f7fa f997 	bl	8003554 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40005c00 	.word	0x40005c00
 8009234:	40023800 	.word	0x40023800
 8009238:	40020800 	.word	0x40020800
 800923c:	40020000 	.word	0x40020000

08009240 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08e      	sub	sp, #56	; 0x38
 8009244:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009246:	1d3b      	adds	r3, r7, #4
 8009248:	2234      	movs	r2, #52	; 0x34
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fef3 	bl	800a038 <memset>

  hltdc.Instance = LTDC;
 8009252:	4b39      	ldr	r3, [pc, #228]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009254:	4a39      	ldr	r2, [pc, #228]	; (800933c <MX_LTDC_Init+0xfc>)
 8009256:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009258:	4b37      	ldr	r3, [pc, #220]	; (8009338 <MX_LTDC_Init+0xf8>)
 800925a:	2200      	movs	r2, #0
 800925c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800925e:	4b36      	ldr	r3, [pc, #216]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009260:	2200      	movs	r2, #0
 8009262:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009264:	4b34      	ldr	r3, [pc, #208]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009266:	2200      	movs	r2, #0
 8009268:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800926a:	4b33      	ldr	r3, [pc, #204]	; (8009338 <MX_LTDC_Init+0xf8>)
 800926c:	2200      	movs	r2, #0
 800926e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8009270:	4b31      	ldr	r3, [pc, #196]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009272:	2209      	movs	r2, #9
 8009274:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8009276:	4b30      	ldr	r3, [pc, #192]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009278:	2201      	movs	r2, #1
 800927a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800927c:	4b2e      	ldr	r3, [pc, #184]	; (8009338 <MX_LTDC_Init+0xf8>)
 800927e:	221d      	movs	r2, #29
 8009280:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8009282:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009284:	2203      	movs	r2, #3
 8009286:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8009288:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <MX_LTDC_Init+0xf8>)
 800928a:	f240 120d 	movw	r2, #269	; 0x10d
 800928e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8009290:	4b29      	ldr	r3, [pc, #164]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009292:	f240 1243 	movw	r2, #323	; 0x143
 8009296:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8009298:	4b27      	ldr	r3, [pc, #156]	; (8009338 <MX_LTDC_Init+0xf8>)
 800929a:	f240 1217 	movw	r2, #279	; 0x117
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80092a0:	4b25      	ldr	r3, [pc, #148]	; (8009338 <MX_LTDC_Init+0xf8>)
 80092a2:	f240 1247 	movw	r2, #327	; 0x147
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <MX_LTDC_Init+0xf8>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80092b0:	4b21      	ldr	r3, [pc, #132]	; (8009338 <MX_LTDC_Init+0xf8>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80092b8:	4b1f      	ldr	r3, [pc, #124]	; (8009338 <MX_LTDC_Init+0xf8>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80092c0:	481d      	ldr	r0, [pc, #116]	; (8009338 <MX_LTDC_Init+0xf8>)
 80092c2:	f7fc fc47 	bl	8005b54 <HAL_LTDC_Init>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80092cc:	f000 fb80 	bl	80099d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80092d4:	23f0      	movs	r3, #240	; 0xf0
 80092d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80092dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80092e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80092e2:	2302      	movs	r3, #2
 80092e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80092e6:	23ff      	movs	r3, #255	; 0xff
 80092e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80092ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80092f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80092f4:	2307      	movs	r3, #7
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80092f8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80092fe:	23f0      	movs	r3, #240	; 0xf0
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8009302:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009306:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800931a:	1d3b      	adds	r3, r7, #4
 800931c:	2200      	movs	r2, #0
 800931e:	4619      	mov	r1, r3
 8009320:	4805      	ldr	r0, [pc, #20]	; (8009338 <MX_LTDC_Init+0xf8>)
 8009322:	f7fc fda9 	bl	8005e78 <HAL_LTDC_ConfigLayer>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800932c:	f000 fb50 	bl	80099d0 <Error_Handler>
  }

}
 8009330:	bf00      	nop
 8009332:	3738      	adds	r7, #56	; 0x38
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000434 	.word	0x20000434
 800933c:	40016800 	.word	0x40016800

08009340 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08e      	sub	sp, #56	; 0x38
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	60da      	str	r2, [r3, #12]
 8009356:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a7b      	ldr	r2, [pc, #492]	; (800954c <HAL_LTDC_MspInit+0x20c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	f040 80f0 	bne.w	8009544 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009364:	2300      	movs	r3, #0
 8009366:	623b      	str	r3, [r7, #32]
 8009368:	4a79      	ldr	r2, [pc, #484]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 800936a:	4b79      	ldr	r3, [pc, #484]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009372:	6453      	str	r3, [r2, #68]	; 0x44
 8009374:	4b76      	ldr	r3, [pc, #472]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800937c:	623b      	str	r3, [r7, #32]
 800937e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	4a72      	ldr	r2, [pc, #456]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009386:	4b72      	ldr	r3, [pc, #456]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	f043 0320 	orr.w	r3, r3, #32
 800938e:	6313      	str	r3, [r2, #48]	; 0x30
 8009390:	4b6f      	ldr	r3, [pc, #444]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800939c:	2300      	movs	r3, #0
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	4a6b      	ldr	r2, [pc, #428]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093a2:	4b6b      	ldr	r3, [pc, #428]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	6313      	str	r3, [r2, #48]	; 0x30
 80093ac:	4b68      	ldr	r3, [pc, #416]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	4a64      	ldr	r2, [pc, #400]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093be:	4b64      	ldr	r3, [pc, #400]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	6313      	str	r3, [r2, #48]	; 0x30
 80093c8:	4b61      	ldr	r3, [pc, #388]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	4a5d      	ldr	r2, [pc, #372]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093da:	4b5d      	ldr	r3, [pc, #372]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e2:	6313      	str	r3, [r2, #48]	; 0x30
 80093e4:	4b5a      	ldr	r3, [pc, #360]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	4a56      	ldr	r2, [pc, #344]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093f6:	4b56      	ldr	r3, [pc, #344]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	f043 0304 	orr.w	r3, r3, #4
 80093fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009400:	4b53      	ldr	r3, [pc, #332]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800940c:	2300      	movs	r3, #0
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	4a4f      	ldr	r2, [pc, #316]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009412:	4b4f      	ldr	r3, [pc, #316]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 8009414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009416:	f043 0308 	orr.w	r3, r3, #8
 800941a:	6313      	str	r3, [r2, #48]	; 0x30
 800941c:	4b4c      	ldr	r3, [pc, #304]	; (8009550 <HAL_LTDC_MspInit+0x210>)
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	60bb      	str	r3, [r7, #8]
 8009426:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8009428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800942e:	2302      	movs	r3, #2
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009432:	2300      	movs	r3, #0
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009436:	2301      	movs	r3, #1
 8009438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800943a:	230e      	movs	r3, #14
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800943e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009442:	4619      	mov	r1, r3
 8009444:	4843      	ldr	r0, [pc, #268]	; (8009554 <HAL_LTDC_MspInit+0x214>)
 8009446:	f7f9 fedb 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800944a:	f641 0358 	movw	r3, #6232	; 0x1858
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009450:	2302      	movs	r3, #2
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009454:	2300      	movs	r3, #0
 8009456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009458:	2301      	movs	r3, #1
 800945a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800945c:	230e      	movs	r3, #14
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009464:	4619      	mov	r1, r3
 8009466:	483c      	ldr	r0, [pc, #240]	; (8009558 <HAL_LTDC_MspInit+0x218>)
 8009468:	f7f9 feca 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800946c:	2303      	movs	r3, #3
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009470:	2302      	movs	r3, #2
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009474:	2300      	movs	r3, #0
 8009476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009478:	2301      	movs	r3, #1
 800947a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800947c:	2309      	movs	r3, #9
 800947e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009484:	4619      	mov	r1, r3
 8009486:	4835      	ldr	r0, [pc, #212]	; (800955c <HAL_LTDC_MspInit+0x21c>)
 8009488:	f7f9 feba 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800948c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009492:	2302      	movs	r3, #2
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009496:	2300      	movs	r3, #0
 8009498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800949a:	2301      	movs	r3, #1
 800949c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800949e:	230e      	movs	r3, #14
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a6:	4619      	mov	r1, r3
 80094a8:	482c      	ldr	r0, [pc, #176]	; (800955c <HAL_LTDC_MspInit+0x21c>)
 80094aa:	f7f9 fea9 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80094ae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094b4:	2302      	movs	r3, #2
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80094bc:	2301      	movs	r3, #1
 80094be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80094c0:	230e      	movs	r3, #14
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80094c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c8:	4619      	mov	r1, r3
 80094ca:	4825      	ldr	r0, [pc, #148]	; (8009560 <HAL_LTDC_MspInit+0x220>)
 80094cc:	f7f9 fe98 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80094d0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d6:	2302      	movs	r3, #2
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80094de:	2301      	movs	r3, #1
 80094e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80094e2:	230e      	movs	r3, #14
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ea:	4619      	mov	r1, r3
 80094ec:	481d      	ldr	r0, [pc, #116]	; (8009564 <HAL_LTDC_MspInit+0x224>)
 80094ee:	f7f9 fe87 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80094f2:	2348      	movs	r3, #72	; 0x48
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f6:	2302      	movs	r3, #2
 80094f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80094fe:	2301      	movs	r3, #1
 8009500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009502:	230e      	movs	r3, #14
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800950a:	4619      	mov	r1, r3
 800950c:	4816      	ldr	r0, [pc, #88]	; (8009568 <HAL_LTDC_MspInit+0x228>)
 800950e:	f7f9 fe77 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8009512:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009518:	2302      	movs	r3, #2
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009520:	2301      	movs	r3, #1
 8009522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009524:	2309      	movs	r3, #9
 8009526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800952c:	4619      	mov	r1, r3
 800952e:	480c      	ldr	r0, [pc, #48]	; (8009560 <HAL_LTDC_MspInit+0x220>)
 8009530:	f7f9 fe66 	bl	8003200 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8009534:	2200      	movs	r2, #0
 8009536:	2105      	movs	r1, #5
 8009538:	2058      	movs	r0, #88	; 0x58
 800953a:	f7f9 f8c1 	bl	80026c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800953e:	2058      	movs	r0, #88	; 0x58
 8009540:	f7f9 f8da 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8009544:	bf00      	nop
 8009546:	3738      	adds	r7, #56	; 0x38
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40016800 	.word	0x40016800
 8009550:	40023800 	.word	0x40023800
 8009554:	40021400 	.word	0x40021400
 8009558:	40020000 	.word	0x40020000
 800955c:	40020400 	.word	0x40020400
 8009560:	40021800 	.word	0x40021800
 8009564:	40020800 	.word	0x40020800
 8009568:	40020c00 	.word	0x40020c00

0800956c <BLUE_BUTTON>:
I2C_HandleTypeDef hi2c3;

void SystemClock_Config(void);
void MX_USB_HOST_Process(void);

void BLUE_BUTTON (void){
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0

	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8009570:	4819      	ldr	r0, [pc, #100]	; (80095d8 <BLUE_BUTTON+0x6c>)
 8009572:	f7f8 f8a1 	bl	80016b8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8009576:	4819      	ldr	r0, [pc, #100]	; (80095dc <BLUE_BUTTON+0x70>)
 8009578:	f7f8 f852 	bl	8001620 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(80, 50, 80, 60);
 800957c:	233c      	movs	r3, #60	; 0x3c
 800957e:	2250      	movs	r2, #80	; 0x50
 8009580:	2132      	movs	r1, #50	; 0x32
 8009582:	2050      	movs	r0, #80	; 0x50
 8009584:	f7f8 fa3e 	bl	8001a04 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(80, 50, 80 , 60);
 8009588:	233c      	movs	r3, #60	; 0x3c
 800958a:	2250      	movs	r2, #80	; 0x50
 800958c:	2132      	movs	r1, #50	; 0x32
 800958e:	2050      	movs	r0, #80	; 0x50
 8009590:	f7f8 fa6a 	bl	8001a68 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8009594:	4812      	ldr	r0, [pc, #72]	; (80095e0 <BLUE_BUTTON+0x74>)
 8009596:	f7f8 f843 	bl	8001620 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(80, 210, 80, 60);
 800959a:	233c      	movs	r3, #60	; 0x3c
 800959c:	2250      	movs	r2, #80	; 0x50
 800959e:	21d2      	movs	r1, #210	; 0xd2
 80095a0:	2050      	movs	r0, #80	; 0x50
 80095a2:	f7f8 fa2f 	bl	8001a04 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(80, 210, 80, 60);
 80095a6:	233c      	movs	r3, #60	; 0x3c
 80095a8:	2250      	movs	r2, #80	; 0x50
 80095aa:	21d2      	movs	r1, #210	; 0xd2
 80095ac:	2050      	movs	r0, #80	; 0x50
 80095ae:	f7f8 fa5b 	bl	8001a68 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80095b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80095b6:	f7f8 f833 	bl	8001620 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 80095ba:	4807      	ldr	r0, [pc, #28]	; (80095d8 <BLUE_BUTTON+0x6c>)
 80095bc:	f7f8 f848 	bl	8001650 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 80095c0:	4808      	ldr	r0, [pc, #32]	; (80095e4 <BLUE_BUTTON+0x78>)
 80095c2:	f7f8 f85f 	bl	8001684 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)" I'm BLUE", CENTER_MODE);
 80095c6:	2301      	movs	r3, #1
 80095c8:	4a07      	ldr	r2, [pc, #28]	; (80095e8 <BLUE_BUTTON+0x7c>)
 80095ca:	211e      	movs	r1, #30
 80095cc:	2000      	movs	r0, #0
 80095ce:	f7f8 f8df 	bl	8001790 <BSP_LCD_DisplayStringAt>

}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	ff8080ff 	.word	0xff8080ff
 80095dc:	ff000080 	.word	0xff000080
 80095e0:	ff800080 	.word	0xff800080
 80095e4:	20000070 	.word	0x20000070
 80095e8:	0800a060 	.word	0x0800a060

080095ec <MAGENTA_BUTTON>:
void MAGENTA_BUTTON (void){
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_LIGHTMAGENTA);
 80095f0:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 80095f4:	f7f8 f860 	bl	80016b8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80095f8:	4818      	ldr	r0, [pc, #96]	; (800965c <MAGENTA_BUTTON+0x70>)
 80095fa:	f7f8 f811 	bl	8001620 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(80, 50, 80, 60);
 80095fe:	233c      	movs	r3, #60	; 0x3c
 8009600:	2250      	movs	r2, #80	; 0x50
 8009602:	2132      	movs	r1, #50	; 0x32
 8009604:	2050      	movs	r0, #80	; 0x50
 8009606:	f7f8 f9fd 	bl	8001a04 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(80, 50, 80 , 60);
 800960a:	233c      	movs	r3, #60	; 0x3c
 800960c:	2250      	movs	r2, #80	; 0x50
 800960e:	2132      	movs	r1, #50	; 0x32
 8009610:	2050      	movs	r0, #80	; 0x50
 8009612:	f7f8 fa29 	bl	8001a68 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8009616:	4812      	ldr	r0, [pc, #72]	; (8009660 <MAGENTA_BUTTON+0x74>)
 8009618:	f7f8 f802 	bl	8001620 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(80, 210, 80, 60);
 800961c:	233c      	movs	r3, #60	; 0x3c
 800961e:	2250      	movs	r2, #80	; 0x50
 8009620:	21d2      	movs	r1, #210	; 0xd2
 8009622:	2050      	movs	r0, #80	; 0x50
 8009624:	f7f8 f9ee 	bl	8001a04 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(80, 210, 80, 60);
 8009628:	233c      	movs	r3, #60	; 0x3c
 800962a:	2250      	movs	r2, #80	; 0x50
 800962c:	21d2      	movs	r1, #210	; 0xd2
 800962e:	2050      	movs	r0, #80	; 0x50
 8009630:	f7f8 fa1a 	bl	8001a68 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009634:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009638:	f7f7 fff2 	bl	8001620 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTMAGENTA);
 800963c:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8009640:	f7f8 f806 	bl	8001650 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 8009644:	4807      	ldr	r0, [pc, #28]	; (8009664 <MAGENTA_BUTTON+0x78>)
 8009646:	f7f8 f81d 	bl	8001684 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"I'm MAGENTA", CENTER_MODE);
 800964a:	2301      	movs	r3, #1
 800964c:	4a06      	ldr	r2, [pc, #24]	; (8009668 <MAGENTA_BUTTON+0x7c>)
 800964e:	21be      	movs	r1, #190	; 0xbe
 8009650:	2000      	movs	r0, #0
 8009652:	f7f8 f89d 	bl	8001790 <BSP_LCD_DisplayStringAt>
}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	ff000080 	.word	0xff000080
 8009660:	ff800080 	.word	0xff800080
 8009664:	20000070 	.word	0x20000070
 8009668:	0800a06c 	.word	0x0800a06c

0800966c <main>:

int main(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  //static char temp;
//	uint8_t cntr = 0;

  HAL_Init();
 8009670:	f7f8 ff0c 	bl	800248c <HAL_Init>

  SystemClock_Config();
 8009674:	f000 f8ee 	bl	8009854 <SystemClock_Config>

  MX_GPIO_Init();
 8009678:	f7ff fc02 	bl	8008e80 <MX_GPIO_Init>
  MX_CRC_Init();
 800967c:	f7ff fa84 	bl	8008b88 <MX_CRC_Init>
  MX_DMA2D_Init();
 8009680:	f7ff fab8 	bl	8008bf4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8009684:	f7ff fb10 	bl	8008ca8 <MX_FMC_Init>
  MX_I2C3_Init();
 8009688:	f7ff fd0a 	bl	80090a0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800968c:	f7ff fdd8 	bl	8009240 <MX_LTDC_Init>
  MX_SPI5_Init();
 8009690:	f000 f9a6 	bl	80099e0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8009694:	f000 fb52 	bl	8009d3c <MX_TIM1_Init>
//  MX_USART1_UART_Init();
//  MX_USB_HOST_Init();

  HAL_TIM_Base_Start_IT(&htim1);
 8009698:	4860      	ldr	r0, [pc, #384]	; (800981c <main+0x1b0>)
 800969a:	f7fe fa16 	bl	8007aca <HAL_TIM_Base_Start_IT>

  BSP_LCD_Init();
 800969e:	f7f7 fec9 	bl	8001434 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80096a2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f7 ff46 	bl	8001538 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 80096ac:	2000      	movs	r0, #0
 80096ae:	f7f7 ffa7 	bl	8001600 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80096b2:	f7f8 fa33 	bl	8001b1c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 80096b6:	485a      	ldr	r0, [pc, #360]	; (8009820 <main+0x1b4>)
 80096b8:	f7f7 fffe 	bl	80016b8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);//0x253617);
 80096bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80096c0:	f7f7 ffae 	bl	8001620 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80096c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80096c8:	f7f7 ffc2 	bl	8001650 <BSP_LCD_SetBackColor>

  BSP_TS_Init(240, 320);
 80096cc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096d0:	20f0      	movs	r0, #240	; 0xf0
 80096d2:	f7f8 fdeb 	bl	80022ac <BSP_TS_Init>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80096d6:	4853      	ldr	r0, [pc, #332]	; (8009824 <main+0x1b8>)
 80096d8:	f7f7 ffa2 	bl	8001620 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(80, 50, 80, 60);
 80096dc:	233c      	movs	r3, #60	; 0x3c
 80096de:	2250      	movs	r2, #80	; 0x50
 80096e0:	2132      	movs	r1, #50	; 0x32
 80096e2:	2050      	movs	r0, #80	; 0x50
 80096e4:	f7f8 f98e 	bl	8001a04 <BSP_LCD_DrawRect>
  BSP_LCD_FillRect(80, 50, 80 , 60);
 80096e8:	233c      	movs	r3, #60	; 0x3c
 80096ea:	2250      	movs	r2, #80	; 0x50
 80096ec:	2132      	movs	r1, #50	; 0x32
 80096ee:	2050      	movs	r0, #80	; 0x50
 80096f0:	f7f8 f9ba 	bl	8001a68 <BSP_LCD_FillRect>

  BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 80096f4:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80096f8:	f7f7 ff92 	bl	8001620 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(80, 210, 80, 60);
 80096fc:	233c      	movs	r3, #60	; 0x3c
 80096fe:	2250      	movs	r2, #80	; 0x50
 8009700:	21d2      	movs	r1, #210	; 0xd2
 8009702:	2050      	movs	r0, #80	; 0x50
 8009704:	f7f8 f97e 	bl	8001a04 <BSP_LCD_DrawRect>
  BSP_LCD_FillRect(80, 210, 80, 60);
 8009708:	233c      	movs	r3, #60	; 0x3c
 800970a:	2250      	movs	r2, #80	; 0x50
 800970c:	21d2      	movs	r1, #210	; 0xd2
 800970e:	2050      	movs	r0, #80	; 0x50
 8009710:	f7f8 f9aa 	bl	8001a68 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009714:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009718:	f7f7 ff82 	bl	8001620 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800971c:	4840      	ldr	r0, [pc, #256]	; (8009820 <main+0x1b4>)
 800971e:	f7f7 ff97 	bl	8001650 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font16);
 8009722:	4841      	ldr	r0, [pc, #260]	; (8009828 <main+0x1bc>)
 8009724:	f7f7 ffae 	bl	8001684 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"CAN YOU CLICK", CENTER_MODE);
 8009728:	2301      	movs	r3, #1
 800972a:	4a40      	ldr	r2, [pc, #256]	; (800982c <main+0x1c0>)
 800972c:	2191      	movs	r1, #145	; 0x91
 800972e:	2000      	movs	r0, #0
 8009730:	f7f8 f82e 	bl	8001790 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)" MY RECTANGLE?", CENTER_MODE);
 8009734:	2301      	movs	r3, #1
 8009736:	4a3e      	ldr	r2, [pc, #248]	; (8009830 <main+0x1c4>)
 8009738:	21a0      	movs	r1, #160	; 0xa0
 800973a:	2000      	movs	r0, #0
 800973c:	f7f8 f828 	bl	8001790 <BSP_LCD_DisplayStringAt>
  button1_press = 0;
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <main+0x1c8>)
 8009742:	2200      	movs	r2, #0
 8009744:	701a      	strb	r2, [r3, #0]
//  for( uint8_t i=0 ; i<30 ; i++ )
//	  BSP_LCD_DrawLine( 60 , 120+i , 180 , 120+i );
//  char x[ 20 ];
  button1_press = 0;
 8009746:	4b3b      	ldr	r3, [pc, #236]	; (8009834 <main+0x1c8>)
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]
  button2_press = 0;
 800974c:	4b3a      	ldr	r3, [pc, #232]	; (8009838 <main+0x1cc>)
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]
  button_press=0;
 8009752:	4b3a      	ldr	r3, [pc, #232]	; (800983c <main+0x1d0>)
 8009754:	2200      	movs	r2, #0
 8009756:	701a      	strb	r2, [r3, #0]

  detect = 0;
 8009758:	4b39      	ldr	r3, [pc, #228]	; (8009840 <main+0x1d4>)
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	if(_100_msec == 1){
 800975e:	4b39      	ldr	r3, [pc, #228]	; (8009844 <main+0x1d8>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d1fb      	bne.n	800975e <main+0xf2>
	  _100_msec = 0;
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <main+0x1d8>)
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
		BSP_TS_GetState(&ts);
 800976c:	4836      	ldr	r0, [pc, #216]	; (8009848 <main+0x1dc>)
 800976e:	f7f8 fdd7 	bl	8002320 <BSP_TS_GetState>
		if(detect == 1){
 8009772:	4b33      	ldr	r3, [pc, #204]	; (8009840 <main+0x1d4>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d1f1      	bne.n	800975e <main+0xf2>
			detect = 0;
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <main+0x1d4>)
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
			if((80<=ts.X && ts.X<=160) && (50<=ts.Y && 110>=ts.Y)){
 8009780:	4b31      	ldr	r3, [pc, #196]	; (8009848 <main+0x1dc>)
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	2b4f      	cmp	r3, #79	; 0x4f
 8009786:	d913      	bls.n	80097b0 <main+0x144>
 8009788:	4b2f      	ldr	r3, [pc, #188]	; (8009848 <main+0x1dc>)
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	2ba0      	cmp	r3, #160	; 0xa0
 800978e:	d80f      	bhi.n	80097b0 <main+0x144>
 8009790:	4b2d      	ldr	r3, [pc, #180]	; (8009848 <main+0x1dc>)
 8009792:	889b      	ldrh	r3, [r3, #4]
 8009794:	2b31      	cmp	r3, #49	; 0x31
 8009796:	d90b      	bls.n	80097b0 <main+0x144>
 8009798:	4b2b      	ldr	r3, [pc, #172]	; (8009848 <main+0x1dc>)
 800979a:	889b      	ldrh	r3, [r3, #4]
 800979c:	2b6e      	cmp	r3, #110	; 0x6e
 800979e:	d807      	bhi.n	80097b0 <main+0x144>
				oldbtn = button_press;
 80097a0:	4b26      	ldr	r3, [pc, #152]	; (800983c <main+0x1d0>)
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	4b29      	ldr	r3, [pc, #164]	; (800984c <main+0x1e0>)
 80097a6:	701a      	strb	r2, [r3, #0]
				button_press = 1;
 80097a8:	4b24      	ldr	r3, [pc, #144]	; (800983c <main+0x1d0>)
 80097aa:	2201      	movs	r2, #1
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	e01f      	b.n	80097f0 <main+0x184>
			}
			else if((80<=ts.X && ts.X<=160) && (210<=ts.Y && 270>=ts.Y)){
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <main+0x1dc>)
 80097b2:	885b      	ldrh	r3, [r3, #2]
 80097b4:	2b4f      	cmp	r3, #79	; 0x4f
 80097b6:	d914      	bls.n	80097e2 <main+0x176>
 80097b8:	4b23      	ldr	r3, [pc, #140]	; (8009848 <main+0x1dc>)
 80097ba:	885b      	ldrh	r3, [r3, #2]
 80097bc:	2ba0      	cmp	r3, #160	; 0xa0
 80097be:	d810      	bhi.n	80097e2 <main+0x176>
 80097c0:	4b21      	ldr	r3, [pc, #132]	; (8009848 <main+0x1dc>)
 80097c2:	889b      	ldrh	r3, [r3, #4]
 80097c4:	2bd1      	cmp	r3, #209	; 0xd1
 80097c6:	d90c      	bls.n	80097e2 <main+0x176>
 80097c8:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <main+0x1dc>)
 80097ca:	889b      	ldrh	r3, [r3, #4]
 80097cc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80097d0:	d807      	bhi.n	80097e2 <main+0x176>
				oldbtn = button_press;
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <main+0x1d0>)
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	4b1d      	ldr	r3, [pc, #116]	; (800984c <main+0x1e0>)
 80097d8:	701a      	strb	r2, [r3, #0]
				button_press = 2;
 80097da:	4b18      	ldr	r3, [pc, #96]	; (800983c <main+0x1d0>)
 80097dc:	2202      	movs	r2, #2
 80097de:	701a      	strb	r2, [r3, #0]
 80097e0:	e006      	b.n	80097f0 <main+0x184>

			}
			else{
				oldbtn = btn;
 80097e2:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <main+0x1e4>)
 80097e4:	781a      	ldrb	r2, [r3, #0]
 80097e6:	4b19      	ldr	r3, [pc, #100]	; (800984c <main+0x1e0>)
 80097e8:	701a      	strb	r2, [r3, #0]
				btn = 3;
 80097ea:	4b19      	ldr	r3, [pc, #100]	; (8009850 <main+0x1e4>)
 80097ec:	2203      	movs	r2, #3
 80097ee:	701a      	strb	r2, [r3, #0]

			}
			if(oldbtn != 1 && button_press == 1){
 80097f0:	4b16      	ldr	r3, [pc, #88]	; (800984c <main+0x1e0>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d005      	beq.n	8009804 <main+0x198>
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <main+0x1d0>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d101      	bne.n	8009804 <main+0x198>
				BLUE_BUTTON();
 8009800:	f7ff feb4 	bl	800956c <BLUE_BUTTON>

			}
			if(oldbtn != 2 && button_press == 2){
 8009804:	4b11      	ldr	r3, [pc, #68]	; (800984c <main+0x1e0>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d0a8      	beq.n	800975e <main+0xf2>
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <main+0x1d0>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d1a4      	bne.n	800975e <main+0xf2>
				MAGENTA_BUTTON();
 8009814:	f7ff feea 	bl	80095ec <MAGENTA_BUTTON>
	if(_100_msec == 1){
 8009818:	e7a1      	b.n	800975e <main+0xf2>
 800981a:	bf00      	nop
 800981c:	20000594 	.word	0x20000594
 8009820:	ffd3d3d3 	.word	0xffd3d3d3
 8009824:	ff0000ff 	.word	0xff0000ff
 8009828:	20000070 	.word	0x20000070
 800982c:	0800a078 	.word	0x0800a078
 8009830:	0800a088 	.word	0x0800a088
 8009834:	200004f0 	.word	0x200004f0
 8009838:	200004f2 	.word	0x200004f2
 800983c:	200004f8 	.word	0x200004f8
 8009840:	2000035c 	.word	0x2000035c
 8009844:	200004dc 	.word	0x200004dc
 8009848:	200004e0 	.word	0x200004e0
 800984c:	200004f1 	.word	0x200004f1
 8009850:	200004f9 	.word	0x200004f9

08009854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b0a0      	sub	sp, #128	; 0x80
 8009858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800985a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800985e:	2230      	movs	r2, #48	; 0x30
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fbe8 	bl	800a038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	605a      	str	r2, [r3, #4]
 8009872:	609a      	str	r2, [r3, #8]
 8009874:	60da      	str	r2, [r3, #12]
 8009876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	2230      	movs	r2, #48	; 0x30
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fbd9 	bl	800a038 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009886:	2300      	movs	r3, #0
 8009888:	60bb      	str	r3, [r7, #8]
 800988a:	4a32      	ldr	r2, [pc, #200]	; (8009954 <SystemClock_Config+0x100>)
 800988c:	4b31      	ldr	r3, [pc, #196]	; (8009954 <SystemClock_Config+0x100>)
 800988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009894:	6413      	str	r3, [r2, #64]	; 0x40
 8009896:	4b2f      	ldr	r3, [pc, #188]	; (8009954 <SystemClock_Config+0x100>)
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800989e:	60bb      	str	r3, [r7, #8]
 80098a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	4a2c      	ldr	r2, [pc, #176]	; (8009958 <SystemClock_Config+0x104>)
 80098a8:	4b2b      	ldr	r3, [pc, #172]	; (8009958 <SystemClock_Config+0x104>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80098b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b28      	ldr	r3, [pc, #160]	; (8009958 <SystemClock_Config+0x104>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098be:	607b      	str	r3, [r7, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80098c2:	2301      	movs	r3, #1
 80098c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80098c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80098cc:	2302      	movs	r3, #2
 80098ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80098d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80098d6:	2304      	movs	r3, #4
 80098d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80098da:	2348      	movs	r3, #72	; 0x48
 80098dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80098de:	2302      	movs	r3, #2
 80098e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80098e2:	2303      	movs	r3, #3
 80098e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80098e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fc fcce 	bl	800628c <HAL_RCC_OscConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80098f6:	f000 f86b 	bl	80099d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098fa:	230f      	movs	r3, #15
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80098fe:	2302      	movs	r3, #2
 8009900:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009902:	2300      	movs	r3, #0
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800990a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800990c:	2300      	movs	r3, #0
 800990e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009910:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009914:	2102      	movs	r1, #2
 8009916:	4618      	mov	r0, r3
 8009918:	f7fc fefa 	bl	8006710 <HAL_RCC_ClockConfig>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009922:	f000 f855 	bl	80099d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009926:	2308      	movs	r3, #8
 8009928:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800992a:	2332      	movs	r3, #50	; 0x32
 800992c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800992e:	2302      	movs	r3, #2
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009932:	2300      	movs	r3, #0
 8009934:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	4618      	mov	r0, r3
 800993c:	f7fd f8f4 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8009946:	f000 f843 	bl	80099d0 <Error_Handler>
  }
}
 800994a:	bf00      	nop
 800994c:	3780      	adds	r7, #128	; 0x80
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	40023800 	.word	0x40023800
 8009958:	40007000 	.word	0x40007000

0800995c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
if(htim->Instance == TIM1){
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a13      	ldr	r2, [pc, #76]	; (80099b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d119      	bne.n	80099a2 <HAL_TIM_PeriodElapsedCallback+0x46>
	i++;
 800996e:	4b13      	ldr	r3, [pc, #76]	; (80099bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	4a11      	ldr	r2, [pc, #68]	; (80099bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8009976:	6013      	str	r3, [r2, #0]
	if((i % 10) == 0){
 8009978:	4b10      	ldr	r3, [pc, #64]	; (80099bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	4b10      	ldr	r3, [pc, #64]	; (80099c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800997e:	fb83 2301 	smull	r2, r3, r3, r1
 8009982:	109a      	asrs	r2, r3, #2
 8009984:	17cb      	asrs	r3, r1, #31
 8009986:	1ad2      	subs	r2, r2, r3
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	1aca      	subs	r2, r1, r3
 8009992:	2a00      	cmp	r2, #0
 8009994:	d102      	bne.n	800999c <HAL_TIM_PeriodElapsedCallback+0x40>
		_1_sec = 1;
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8009998:	2201      	movs	r2, #1
 800999a:	701a      	strb	r2, [r3, #0]
	}
	_100_msec = 1;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800999e:	2201      	movs	r2, #1
 80099a0:	701a      	strb	r2, [r3, #0]

}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d101      	bne.n	80099b0 <HAL_TIM_PeriodElapsedCallback+0x54>
    HAL_IncTick();
 80099ac:	f7f8 fd90 	bl	80024d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	40010000 	.word	0x40010000
 80099bc:	200004ec 	.word	0x200004ec
 80099c0:	66666667 	.word	0x66666667
 80099c4:	200004e8 	.word	0x200004e8
 80099c8:	200004dc 	.word	0x200004dc
 80099cc:	40001000 	.word	0x40001000

080099d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80099e4:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <MX_SPI5_Init+0x64>)
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <MX_SPI5_Init+0x68>)
 80099e8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80099ea:	4b16      	ldr	r3, [pc, #88]	; (8009a44 <MX_SPI5_Init+0x64>)
 80099ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80099f0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <MX_SPI5_Init+0x64>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80099f8:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <MX_SPI5_Init+0x64>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80099fe:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a14:	2218      	movs	r2, #24
 8009a16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a18:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a1e:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a24:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009a30:	4804      	ldr	r0, [pc, #16]	; (8009a44 <MX_SPI5_Init+0x64>)
 8009a32:	f7fd fa9c 	bl	8006f6e <HAL_SPI_Init>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009a3c:	f7ff ffc8 	bl	80099d0 <Error_Handler>
  }

}
 8009a40:	bf00      	nop
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	200004fc 	.word	0x200004fc
 8009a48:	40015000 	.word	0x40015000

08009a4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a54:	f107 0314 	add.w	r3, r7, #20
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	609a      	str	r2, [r3, #8]
 8009a60:	60da      	str	r2, [r3, #12]
 8009a62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a19      	ldr	r2, [pc, #100]	; (8009ad0 <HAL_SPI_MspInit+0x84>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d12c      	bne.n	8009ac8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009a6e:	2300      	movs	r3, #0
 8009a70:	613b      	str	r3, [r7, #16]
 8009a72:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a74:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7e:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	4a11      	ldr	r2, [pc, #68]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	f043 0320 	orr.w	r3, r3, #32
 8009a98:	6313      	str	r3, [r2, #48]	; 0x30
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <HAL_SPI_MspInit+0x88>)
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8009aa6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aac:	2302      	movs	r3, #2
 8009aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8009ab8:	2305      	movs	r3, #5
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009abc:	f107 0314 	add.w	r3, r7, #20
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <HAL_SPI_MspInit+0x8c>)
 8009ac4:	f7f9 fb9c 	bl	8003200 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009ac8:	bf00      	nop
 8009aca:	3728      	adds	r7, #40	; 0x28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	40015000 	.word	0x40015000
 8009ad4:	40023800 	.word	0x40023800
 8009ad8:	40021400 	.word	0x40021400

08009adc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a08      	ldr	r2, [pc, #32]	; (8009b0c <HAL_SPI_MspDeInit+0x30>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d10a      	bne.n	8009b04 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8009aee:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <HAL_SPI_MspDeInit+0x34>)
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <HAL_SPI_MspDeInit+0x34>)
 8009af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009af8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8009afa:	f44f 7160 	mov.w	r1, #896	; 0x380
 8009afe:	4805      	ldr	r0, [pc, #20]	; (8009b14 <HAL_SPI_MspDeInit+0x38>)
 8009b00:	f7f9 fd28 	bl	8003554 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	40015000 	.word	0x40015000
 8009b10:	40023800 	.word	0x40023800
 8009b14:	40021400 	.word	0x40021400

08009b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b1e:	2300      	movs	r3, #0
 8009b20:	607b      	str	r3, [r7, #4]
 8009b22:	4a10      	ldr	r2, [pc, #64]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4a09      	ldr	r2, [pc, #36]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b40:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b48:	6413      	str	r3, [r2, #64]	; 0x40
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <HAL_MspInit+0x4c>)
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40023800 	.word	0x40023800

08009b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08c      	sub	sp, #48	; 0x30
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009b78:	2200      	movs	r2, #0
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	2036      	movs	r0, #54	; 0x36
 8009b7e:	f7f8 fd9f 	bl	80026c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009b82:	2036      	movs	r0, #54	; 0x36
 8009b84:	f7f8 fdb8 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	4a1f      	ldr	r2, [pc, #124]	; (8009c0c <HAL_InitTick+0xa4>)
 8009b8e:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <HAL_InitTick+0xa4>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f043 0310 	orr.w	r3, r3, #16
 8009b96:	6413      	str	r3, [r2, #64]	; 0x40
 8009b98:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <HAL_InitTick+0xa4>)
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ba4:	f107 0210 	add.w	r2, r7, #16
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fc ff88 	bl	8006ac4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fc ff72 	bl	8006a9c <HAL_RCC_GetPCLK1Freq>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <HAL_InitTick+0xa8>)
 8009bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc6:	0c9b      	lsrs	r3, r3, #18
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009bcc:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <HAL_InitTick+0xac>)
 8009bce:	4a12      	ldr	r2, [pc, #72]	; (8009c18 <HAL_InitTick+0xb0>)
 8009bd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009bd2:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <HAL_InitTick+0xac>)
 8009bd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009bd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009bda:	4a0e      	ldr	r2, [pc, #56]	; (8009c14 <HAL_InitTick+0xac>)
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009be0:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <HAL_InitTick+0xac>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <HAL_InitTick+0xac>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009bec:	4809      	ldr	r0, [pc, #36]	; (8009c14 <HAL_InitTick+0xac>)
 8009bee:	f7fd ff41 	bl	8007a74 <HAL_TIM_Base_Init>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d104      	bne.n	8009c02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009bf8:	4806      	ldr	r0, [pc, #24]	; (8009c14 <HAL_InitTick+0xac>)
 8009bfa:	f7fd ff66 	bl	8007aca <HAL_TIM_Base_Start_IT>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	e000      	b.n	8009c04 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3730      	adds	r7, #48	; 0x30
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40023800 	.word	0x40023800
 8009c10:	431bde83 	.word	0x431bde83
 8009c14:	20000554 	.word	0x20000554
 8009c18:	40001000 	.word	0x40001000

08009c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009c20:	bf00      	nop
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c2e:	e7fe      	b.n	8009c2e <HardFault_Handler+0x4>

08009c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c34:	e7fe      	b.n	8009c34 <MemManage_Handler+0x4>

08009c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c36:	b480      	push	{r7}
 8009c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c3a:	e7fe      	b.n	8009c3a <BusFault_Handler+0x4>

08009c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c40:	e7fe      	b.n	8009c40 <UsageFault_Handler+0x4>

08009c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c42:	b480      	push	{r7}
 8009c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c54:	bf00      	nop
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c62:	bf00      	nop
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009c70:	4802      	ldr	r0, [pc, #8]	; (8009c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009c72:	f7fd ff4e 	bl	8007b12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000594 	.word	0x20000594

08009c80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <TIM6_DAC_IRQHandler+0x10>)
 8009c86:	f7fd ff44 	bl	8007b12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000554 	.word	0x20000554

08009c94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8009c98:	4802      	ldr	r0, [pc, #8]	; (8009ca4 <OTG_HS_IRQHandler+0x10>)
 8009c9a:	f7f9 fd80 	bl	800379e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8009c9e:	bf00      	nop
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200005d4 	.word	0x200005d4

08009ca8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009cac:	4802      	ldr	r0, [pc, #8]	; (8009cb8 <LTDC_IRQHandler+0x10>)
 8009cae:	f7fc f821 	bl	8005cf4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009cb2:	bf00      	nop
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000434 	.word	0x20000434

08009cbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8009cc0:	4802      	ldr	r0, [pc, #8]	; (8009ccc <DMA2D_IRQHandler+0x10>)
 8009cc2:	f7f9 f860 	bl	8002d86 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8009cc6:	bf00      	nop
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	2000036c 	.word	0x2000036c

08009cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009cd4:	4a16      	ldr	r2, [pc, #88]	; (8009d30 <SystemInit+0x60>)
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <SystemInit+0x60>)
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009ce4:	4a13      	ldr	r2, [pc, #76]	; (8009d34 <SystemInit+0x64>)
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <SystemInit+0x64>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009cf0:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <SystemInit+0x64>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009cf6:	4a0f      	ldr	r2, [pc, #60]	; (8009d34 <SystemInit+0x64>)
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <SystemInit+0x64>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <SystemInit+0x64>)
 8009d08:	4a0b      	ldr	r2, [pc, #44]	; (8009d38 <SystemInit+0x68>)
 8009d0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009d0c:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <SystemInit+0x64>)
 8009d0e:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <SystemInit+0x64>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009d18:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <SystemInit+0x64>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <SystemInit+0x60>)
 8009d20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d24:	609a      	str	r2, [r3, #8]
#endif
}
 8009d26:	bf00      	nop
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	e000ed00 	.word	0xe000ed00
 8009d34:	40023800 	.word	0x40023800
 8009d38:	24003010 	.word	0x24003010

08009d3c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d42:	f107 0308 	add.w	r3, r7, #8
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	605a      	str	r2, [r3, #4]
 8009d4c:	609a      	str	r2, [r3, #8]
 8009d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d50:	463b      	mov	r3, r7
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8009d58:	4b1f      	ldr	r3, [pc, #124]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d5a:	4a20      	ldr	r2, [pc, #128]	; (8009ddc <MX_TIM1_Init+0xa0>)
 8009d5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3600;
 8009d5e:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d60:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d66:	4b1c      	ldr	r3, [pc, #112]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8009d6c:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d74:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009d7a:	4b17      	ldr	r3, [pc, #92]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d80:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009d86:	4814      	ldr	r0, [pc, #80]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009d88:	f7fd fe74 	bl	8007a74 <HAL_TIM_Base_Init>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009d92:	f7ff fe1d 	bl	80099d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4619      	mov	r1, r3
 8009da2:	480d      	ldr	r0, [pc, #52]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009da4:	f7fd ffbd 	bl	8007d22 <HAL_TIM_ConfigClockSource>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009dae:	f7ff fe0f 	bl	80099d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009db2:	2300      	movs	r3, #0
 8009db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009dba:	463b      	mov	r3, r7
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4806      	ldr	r0, [pc, #24]	; (8009dd8 <MX_TIM1_Init+0x9c>)
 8009dc0:	f7fe f9c8 	bl	8008154 <HAL_TIMEx_MasterConfigSynchronization>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009dca:	f7ff fe01 	bl	80099d0 <Error_Handler>
  }

}
 8009dce:	bf00      	nop
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000594 	.word	0x20000594
 8009ddc:	40010000 	.word	0x40010000

08009de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a0e      	ldr	r2, [pc, #56]	; (8009e28 <HAL_TIM_Base_MspInit+0x48>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d115      	bne.n	8009e1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	4a0d      	ldr	r2, [pc, #52]	; (8009e2c <HAL_TIM_Base_MspInit+0x4c>)
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <HAL_TIM_Base_MspInit+0x4c>)
 8009dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	6453      	str	r3, [r2, #68]	; 0x44
 8009e02:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <HAL_TIM_Base_MspInit+0x4c>)
 8009e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	2019      	movs	r0, #25
 8009e14:	f7f8 fc54 	bl	80026c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009e18:	2019      	movs	r0, #25
 8009e1a:	f7f8 fc6d 	bl	80026f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40023800 	.word	0x40023800

08009e30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fded 	bl	8008a1e <USBH_LL_IncTimer>
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fe25 	bl	8008aaa <USBH_LL_Connect>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fe3d 	bl	8008af6 <USBH_LL_Disconnect>
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
 8009e90:	4613      	mov	r3, r2
 8009e92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fddf 	bl	8008a72 <USBH_LL_PortEnabled>
} 
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fddf 	bl	8008a8e <USBH_LL_PortDisabled>
} 
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7f9 fd5c 	bl	80039ac <HAL_HCD_Start>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 f822 	bl	8009f44 <USBH_Get_USB_Status>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f9 fd64 	bl	80039f2 <HAL_HCD_Stop>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f807 	bl	8009f44 <USBH_Get_USB_Status>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d817      	bhi.n	8009f88 <USBH_Get_USB_Status+0x44>
 8009f58:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <USBH_Get_USB_Status+0x1c>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f77 	.word	0x08009f77
 8009f68:	08009f7d 	.word	0x08009f7d
 8009f6c:	08009f83 	.word	0x08009f83
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
    break;
 8009f74:	e00b      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009f76:	2302      	movs	r3, #2
 8009f78:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7a:	e008      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e005      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009f82:	2302      	movs	r3, #2
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e002      	b.n	8009f8e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	bf00      	nop
  }
  return usb_status;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8009f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009fd4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009fa2:	e003      	b.n	8009fac <LoopCopyDataInit>

08009fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009faa:	3104      	adds	r1, #4

08009fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009fac:	480b      	ldr	r0, [pc, #44]	; (8009fdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009fb4:	d3f6      	bcc.n	8009fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8009fb6:	4a0b      	ldr	r2, [pc, #44]	; (8009fe4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009fb8:	e002      	b.n	8009fc0 <LoopFillZerobss>

08009fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009fbc:	f842 3b04 	str.w	r3, [r2], #4

08009fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009fc4:	d3f9      	bcc.n	8009fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009fc6:	f7ff fe83 	bl	8009cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009fca:	f000 f811 	bl	8009ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009fce:	f7ff fb4d 	bl	800966c <main>
  bx  lr    
 8009fd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8009fd4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009fd8:	0800c760 	.word	0x0800c760
  ldr  r0, =_sdata
 8009fdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009fe0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8009fe4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8009fe8:	20000898 	.word	0x20000898

08009fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009fec:	e7fe      	b.n	8009fec <ADC_IRQHandler>
	...

08009ff0 <__libc_init_array>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4e0d      	ldr	r6, [pc, #52]	; (800a028 <__libc_init_array+0x38>)
 8009ff4:	4c0d      	ldr	r4, [pc, #52]	; (800a02c <__libc_init_array+0x3c>)
 8009ff6:	1ba4      	subs	r4, r4, r6
 8009ff8:	10a4      	asrs	r4, r4, #2
 8009ffa:	2500      	movs	r5, #0
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d109      	bne.n	800a014 <__libc_init_array+0x24>
 800a000:	4e0b      	ldr	r6, [pc, #44]	; (800a030 <__libc_init_array+0x40>)
 800a002:	4c0c      	ldr	r4, [pc, #48]	; (800a034 <__libc_init_array+0x44>)
 800a004:	f000 f820 	bl	800a048 <_init>
 800a008:	1ba4      	subs	r4, r4, r6
 800a00a:	10a4      	asrs	r4, r4, #2
 800a00c:	2500      	movs	r5, #0
 800a00e:	42a5      	cmp	r5, r4
 800a010:	d105      	bne.n	800a01e <__libc_init_array+0x2e>
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a018:	4798      	blx	r3
 800a01a:	3501      	adds	r5, #1
 800a01c:	e7ee      	b.n	8009ffc <__libc_init_array+0xc>
 800a01e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a022:	4798      	blx	r3
 800a024:	3501      	adds	r5, #1
 800a026:	e7f2      	b.n	800a00e <__libc_init_array+0x1e>
 800a028:	0800c758 	.word	0x0800c758
 800a02c:	0800c758 	.word	0x0800c758
 800a030:	0800c758 	.word	0x0800c758
 800a034:	0800c75c 	.word	0x0800c75c

0800a038 <memset>:
 800a038:	4402      	add	r2, r0
 800a03a:	4603      	mov	r3, r0
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d100      	bne.n	800a042 <memset+0xa>
 800a040:	4770      	bx	lr
 800a042:	f803 1b01 	strb.w	r1, [r3], #1
 800a046:	e7f9      	b.n	800a03c <memset+0x4>

0800a048 <_init>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

0800a054 <_fini>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr
